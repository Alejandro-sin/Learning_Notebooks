
******************************************************
#    **CURSO:   MONGO DB**
******************************************************
* LECTURAS MAESTRAS:
* RESUMEN MAESTRO:



* GLOSARIO UNIVERSAL DE TÉRMINOS:
* ATAJOS:

##   **TEMA:**

**||||||||||||||||||||||||||||||||||||||||||||||||||||||**
####    **NOTAS:**

||||||||||||||||||||||||||||||||||||||||||||||||||||||
BD Según modelo de datos.

Grafos, columanres, Keyvalu stores, Documentos.


Key Values_Store Redis: Utilizadas para guardar sesiones usarios, caché, debido a simplicidad no puee modelar muchos casos de vida real. Memcached
Grafos: Establecer relacioens dentro entidades, un tweet tiene relacion con usuarios con un enlace. Neo4j, JanusGRAPH
Columnares. Poseen dos llaves, filas y columnas, querys rapidas, BOG DATA iot, Sistemas de recomendación, modelar datos es complejo, Alto rendimiento arquitectura escalable. Cassandra, HBase
Documentos,.Mongo DB, colecciones, Podemos modelar casos de la vida real de una manera sencilla, porpósito genral.Couchbase, estructura tipos JSON.

_____________________________________________________
Definicicón de Mongo DB y su ecosistema
______________________________________________________


MongoDB es una base de datos gratis y de código abierto No Relacional basada en documentos que nos permite guardar una gran cantidad de documentos de forma distribuida. Mongo también es el nombre de la compañía que desarrolla el código de esta base de datos.

Una de sus principales características es que nos permite guardar nuestras estructuras o documentos en formato JSON (no exactamente JSON, pero si algo muy parecido, lo veremos más adelante) para tener una gran flexibilidad a la hora de modelar situaciones de la vida real.

Por ser una base de datos distribuida podemos hablar no de uno sino de varios servidores, lo que conocemos como el Cluster de MongoDB. Gracias a esto obtenemos una gran escalabilidad de forma horizontal (escalabilidad en cantidad de servidores).

MongoDB es “Schema Less” lo que permite que nuestros documentos tengan estructuras diferentes sin afectar su funcionamiento, algo que no podemos hacer con las tablas de las bases de datos relacionales. Su lenguaje para realizar queries, índices y agregaciones es muy expresivo.



BSON es una represntación binaria de un JSON, Mongo DB es distribuida.
SchemaLess dentro de las colecciones (similar a tablas) , nos ayuda a que la BD crezca con la aplicación.
Podemos crear funciones. mLab cluster administrados, aws,.


MongoDB Atlas

Tenemos varios proveedores que nos permiten utilizar o alquilar MongoDB como servicio y en este caso vamos a usar MongoDB Atlas por ser desarrollado por las mismas personas que desarrollan MongoDB.

MongoDB Atlas tiene las siguientes características:

Aprovisionamiento automático de clusters con MongoDB
Alta disponibilidad
Altamente escalable
Seguro
Disponible en AWS, GCP y Microsoft Azure
Fácil monitoreo y optimización

//Sucedieron varias cosas dentro de la instalación, la primera es que  no sé que programas hay que ejecutar desde el entorno de variable sy porqué, para qué, quisiera profundizar en estos conocimientos. 

El segundo es porqué no me sirve el mongoShell? Como puedo hacer que me ejecute las cosas? Después de intentar conectar con la URL del Cluster me queda en ...

Porque si desde el cmd? 

Fuí a la carpeta dondes estab instalda C//PorgramaFiles/MongoDB/Server/4.2/Bin ... Desde ahí instalar
mongo "mongodb+srv://platzi-admin:Y9xEelie9n1e46Dn@curso-platzi-mongodb-pbcyv.mongodb.net"  --username platzi-admin

Sucede un proceso de autenticación, y para probar que mi BD está bien, lo que hago es crear un elemento Bson/Json, para insertarlo en una Bd nueva.

show dbs// me muestra als bases de datos
use nombreBD -db// me crea y me devuelve la BD
show collections

Creo el elemnto BSON//db.inventory.insertOne(
{ item:"canvas",
  qty: 100, 
  tags:["cotton"],
  size:{h:28,w:35.5,uom:"cm"}
}) 

db.inventory.findOne() // Me devuelve el objeto. 



_________________________________
MongoDB + Drivers
_________________________________

En esta clase el profesor Albert Ramirez nos explica qué son los drivers de MongoDB y cómo integrarlos en nuestras aplicaciones.

MongoDB es una base de datos open source, NoSQL y basada en documentos que nos permite guardar una gran cantidad información de forma distribuida. Mongo también es el nombre de la compañía que desarrolla el código de esta base de datos. Los drivers de MongoDB son librerías oficiales o desarrolladas por la comunidad que podemos usar para comunicar nuestras aplicaciones con las bases de datos. Una de las más populares es Mongoid, un ODM que convierte nuestros código Ruby en queries que entiende nuestra base de datos.

Drivers son librerias que usamos para comunicar una app con una BD.
Arquitectura.
Las operaciones de administración se hacne con consola y dbcompass.

Un gestor dependencias.

python - m pip install pymongo
npm install mongodb --save  Cerciorarme en PackageJSON.


_________________________________
Bases de datos, Colecciones y Documentos en MongoDB
_________________________________
Las Bases de Datos son los contenedores físicos para nuestras colecciones. Cada base de datos tiene un archivo propio en el sistema de archivos de nuestra computadora o servidor y un Cluster puede tener múltiples bases de datos.

Las Colecciones son agrupaciones de documentos. Son equivalentes a las tablas en bases de datos relacionales pero NO nos imponen un esquema o estructura rígida para guardar información.

Los Documentos son registros dentro de las colecciones. Son la unidad básica de MongoDB y son análogos a los objetos JSON pero en realidad son BSON.Transformación binaria de un Json


____________________________________________________

Operaciones CRUD desde la consola de MongoDB
____________________________________________________
Operaciones CRUD, 

Create, Read, update, Delete.


Instrucciones y comandos de la clase:

Conexión con el cluster de MongoDB Atlas: mongo "URL DE NUESTRO CLUSTER", (recuerda añadir tu IP a la lista de IPs permitidas para no tener problemas en esta parte).
Listar las bases de datos de nuestro cluster: show dbs.
Seleccionar una base de datos: use NOMBRE_BD. Debemos crear por lo menos un documento si la base de datos es nueva porque MongoDB no crea bases de datos vacías.
Recordar qué base de datos estamos usando: db.
Listar las colecciones de nuestra base de datos: show collections.
Crear una colección (opcional) y añadir un elemento en formato JSON: db.NOMBRE_COLECCIÓN.insertOne({ ... }). La base de datos responde true si la operación fue exitosa y crea el campo irrepetible de _id si nosotros no lo especificamos.
Crear una colección (opcional) y añadir algunos elementos en formato JSON: db.NOMBRE_COLECCIÓN.insertMany([{ ... }, { ... }]). Recibe un array de elementos y devuelve todos los IDs de los elementos que se crearon correctamente.
	ATOMICIDAD dentro de lso documentos. En operacioens de escritura garantiza la atomicidad. Se escrie o si no se hace rollback. 
Encontrar elementos en una colección: db.NOMBRE_COLECCIÓN.find() Podemos aplicar filtros si queremos o encontrar solo el primer resultado con el método findOne().
Listar todos los posibles comandos que podemos ejecutar: db.NOMBRE_COLECCIÓN.help().

*****************************************************************************************

# Conectarse a MongoDB
mongo <URI Atlas>


# Usar la base de datos creada de platzi
use platzi-db


# El campo _id si no es agregado por nosotros de forma explícita, MongoDB lo agrega por nosotros como un ObjectId
# el campo _id es obligatorio en todos los documentos


# ---------------------------------Create-----------------------------
db.inventory.insertOne(
   { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)


db.inventory.insertMany( [
   { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
   { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
   { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] )

Si hacmos db.NombreCollection.help() // Me arroja todos los comandos que puedo ejecutar sobre la coleccion.

db.inventory.find( { item: "canvas" } )
el método .pretty() me lo devuelve de una mejro manera en consola.
el método count() me devuelve la cuenta

finOne, nos devuelve los docuemntos. En orden Natural.
Mongo guarda de acuerdo los índices.
Puedo llamar por id-->
db.inventory.findOne( {_id: ObjectId (...Object ID hexadecimal)  } )  JSON no hae parte de la especificación.

db.inventory.insertOne(
   { _id: "one", item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)
# Atomicidad, todas las operaciones de escritura en MongoDB con atómicas a nivel de documentos 


# ---------------------------------Read-------------------------------
db.inventory.find( {} )


# Igualdad 
db.inventory.find( { status: "D" } )


# Operadores
db.inventory.find( { qty: { $gt: 30 } } )


# Condición AND
db.inventory.find( { status: "A", qty: { $lt: 30 } } ) //Si ambas son vrdaderas me decuelve un documento. Operadores denotados con $lte es menor o igual


# Condición OR con operador
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )


# Trae el primer documento que cumpla con el filtro de acuerdo al orden natural en que los documentos se encuentren guardados en disco
db.inventory.findOne( { status: "A", qty: { $lt: 30 } } )


# ---------------------------------Update-----------------------------
# Update One
db.inventory.updateOne(
   { item: "paper" },--->filtro
   {
     $set: { "size.uom": "cm", status: "P" }, // Set nos permite actualiizar los value de los campos.

     $currentDate: { lastModified: true }
   })
# Update Many
db.inventory.find({qty: {$lt: 50}})


db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)


db.inventory.find({qty: {$lt: 50}})


# Reemplazar un documento y conservar su _id
db.inventory.find({item: "paper"})


db.inventory.replaceOne(
   { item: "paper" },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
)


db.inventory.find({item: "paper"})
# ---------------------------------Delete-----------------------------
db.inventory.find({status: "A"})


# Borrar muchos documentos de acuerdo a un filtro
db.inventory.deleteMany({ status : "A" })


db.inventory.find({status: "D"})
# Borrar un documento
db.inventory.deleteOne( { status: "D" } )


# Borrar todos los documentos de una base datos
db.inventory.deleteMany({}) Parentesis y corchetes vacíos son. el Filtro

*************************************************************************************


Trabajando en nuestro proyecto PlatziMongo: Operaciones CRUD con Python y pymongo

/// Buscar como se hacen

TIPO DE DATOS DENTRO DE MONGO 

Object ID: Existen en Bson  y siempre son unicos porque toman un tiemp oexacto en el que se genero.
Las fechas es necesarias As Date porque es necesario usar rangos para las fechas.
El Driver transforma desde el lenguaje de progamación al que entiende.
Integer 32 bits
integer 64 bits

Doible, decimales alta precision.
La consola d emongo hace la transformación del dato que almacenra´.
Decimal ifnromación financiarea.

DOCUMENTOS embebidos._ Podemos establecer relaciones entre documentos, embidbos anidos un en otr, y otro en otro.

Arreglos con doumentos embebidos. Nos permite establecer relaciones 1 a muchas no es no pueden ser mayores a 16 MB


¿Qué son los esquemas y las relaciones?
_________________________________________

Los esquemas son la forma en que organizamos nuestros documentos en nuestras colecciones. MongoDB no impone ningún esquema pero podemos seguir buenas prácticas y estructurar nuestros documentos de forma parecida (no igual) para aprovechar la flexibilidad y escalabilidad de la base de datos sin aumentar la complejidad de nuestras aplicaciones.

Las relaciones son la forma en que nuestras entidades o documentos sen encuentran enlazados unos con otros. Por ejemplo: Una carrera tiene multiples cursos y cada curso tiene multiples clases.

EL PUNTO MEDIO ENTRE SQL Y MONGO DB ES EL IDEAL PARA TENER UNA ESTRETEGIA DE ESTRUCTURA Y MEJORA LA VELOCIDAD DE LAS QUERYS.

LAS APLIACIONES SIEMPRE EXISTEN ALS RELACIONES.



Relaciones entre documentos

Las documentos embebidos nos ayudan a guardar la información en un solo documento y nos ahorra el tiempo que tardamos en consultar diferentes documentos a partir de referencias. Sin embargo, las referencias siguen siendo muy importantes cuando debemos actualizar información en diferentes lugares de forma continua.

Los UPDATE  en mongo no sontransaccionales, no quedan todos con los datos actualizadso. Si sabemos que la inforamción no varía podemos duplicar la inf.
Si la fino cambia frecuentemente lo mejor es usar referencias.

Guarda en un array los id de los libros y simmplemente busca un id.









||||||||||||||||||||||||||||||||||||||||||||||||||||||

#### **PREGUNTAS:**
||||||||||||||||||||||||||||||||||||||||||||||||||||||

* 
* 
* 


||||||||||||||||||||||||||||||||||||||||||||||||||||||

#### **RESUMEN PARCIAL**:
______________________________________________________

```
<code>

```

#### **REFERENCIAS INTERESANTES**:
______________________________________________________

+ [Hipervínculo](url)

******************************************************
## EXÁMEN:
||||||||||||||||||||||||||||||||||||||||||||||||||||||


¿Donde es´ta el sistema de retroalimentación de los exámenes?


¿En que formato se guardan los datos en MongoDB?
BSON B.


¿En MongoDB se pueden guardar Arreglos de documentos?


a



¿Para que son los índices dentro de MongoDB?

a


¿Para qué son útiles las agregaciones?

a NO--->c


¿Qué es MongoDB Compass?

b


¿A partir de una instancia de MongoClient puedo hacer operaciones CRUD?
a NO--->b


¿Qué hace la función pretty()?
d


¿Si hacemos db.collection.aggregate([]) dentro del arreglo cuantas etapas pueden haber?
a  NO--->b

¿Qué ocurre si ejecuto db.collection.deleteMany({})?
a NO-->d

¿Cual es la mejor forma de hacer relaciones uno a uno dentro de MongoDB?
d

¿MongoDB es Schema Less (Sin esquema)?
b

¿Hay forma de encriptar los datos guardados en nuestro cluster dentro de MongoDB Atlas?
b

¿Es buena práctica guardar la URI de MongoDB Atlas escrita en código dentro de nuestro repositorio público?
b NO--->c

¿En MongoDB pueden haber documentos guardados dentro de otros documentos?
a

¿Para que sirven los drivers de MongoDB en nuestro BackEnd?
d


¿Cuál es la unidad básica dentro de MongoDB?
c NO--->a

MongoDB es una base de datos basada en
a

¿MongoDB es una base de datos distribuida?

b

¿Qué son las proyecciones en MongoDB?

a


¿Qué ocurre si ejecuto db.collection.find({})?
a NO  --> c

¿Puedo tener más de un índice dentro de una colección?
a

¿Qué es un ODM en el entorno de MongoDB?
d



¿Qué son las listas de IPs blancas dentro de MongoDB Atlas?
b

¿En un cluster de MongoDB pueden haber muchas bases de datos?
a


¿Es lo mismo { $or: [ { }, { }, ... , { } ] } que ({ field: }, { field: }) ?
a NO

¿Si quiero insertar muchos documentos en la base de datos, que función debería usar?

b


¿En MongoDB es obligatorio que todos los documentos en una colección tengan una misma estructura?
b

¿Para que se usan los tipos de datos Decimal?
b


¿Los tipos de datos ObjectId y Date son soportados por JSON?
c

¿Es lo mismo { : { $eq: } } que { field: }?
a NO


Estoy inconforme con el contenido de este curso,  me pareció vago, falto de ejemplificaciones, contextos, si bien estudiamos programación ..
||||||||||||||||||||||||||||||||||||||||||||||||||||||
