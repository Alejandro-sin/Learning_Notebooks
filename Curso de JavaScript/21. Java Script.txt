
LECTURAS MAESTRAS:
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:
REPOSIROTIO DE CLASE: https://github.com/platzi/FundamentosJSCurso

TEMA:


______________________________________________________

**RESUMEN**:
______________________________________________________
El punto y coma es una convención opcional, no nos obliga, por buenas prácticas deberíamos ponerlas
Puedes asignar variables en la misma línea. JS es un lenguaje débilmente tipado, es decir,  una variablespuede interpretarse de diferentes maneras, es decir, puedo declarar un string y un número con el mismo valor. No conocemos el tipo de variable que va a ser.


```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

Los strings son cadenas de texto. Para indicar que estamos usando una cadena de texto debemos de colocar las comillas simples.

En este curso utilizaremos los métodos:

toUpperCase, que sirve para transformar un String a mayúsculas.
toLowerCase, que sirve para transformar el string a minúsculas.
También usaremos el atributo:

length, que nos indica la cantidad de caractéres que tiene un string.
Para concatenar dos strings se utiliza el símbolo (+)
var nombreCompleto = nombre + ’ ’ + apellido

Desafío: Encuentra la última letra de su nombre
```
<code>

```
En esta clase aprenderemos variables de tipo números y las operaciones más comunes en este tipo de variables.

En esta clase veremos operadores matemáticos como:

suma ( + )
resta ( - )
multiplicación
división
Recerda que en operaciones con decimales debemos realizar operaciones adicionales para conseguir un resultado preciso. Ej. var total = ( precioDeVino * 100 * 3) / 100

Para redondear una operación se utiliza la función: Math.round

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

Operadores JS
https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators



PREGUNTAS:
______________________________________________________




TEMA:s¡ SCOPE
______________________________________________________

**RESUMEN**:
______________________________________________________

En esta clase hablaremos del alcance que tienen las funciones. Si una variable no está definida dentro del cuerpo de una función hablamos de una variable global. Por el contrario, una variable definida dentro de una función es una variable local.

Para que la ejecución de una función no modifique una variable global usamos parámetros en lugar de pasar directamente la variable.

Es posible utilizar el mismo nombre para una variable global y para el parámetro de una función con un alcance local.

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________


TEMA:Objetos
______________________________________________________

**RESUMEN**:
______________________________________________________

Objetos:

Vamos a empezar a trabajar con objetos, veremos cómo declararlos, cuáles son sus ventajas, cómo asignarles atributos y cómo trabajar con ellos dentro de las funciones.

Los objetos se definen delimitados mediante llaves {}

Un atributo se compone de una clave (key) y un valor (value), que se separan entre sí por dos puntos “”:"". Los valores pueden ser de tipo string, número, booleano, etc. Cada atributo está separado del siguiente por una coma. Un objeto puede tener todos los atributos que sean necesarios.

Escribir el nombre de un objeto separado por un punto del nombre de un atributo, nos permite acceder al valor de dicho atributo para ese objeto. Un objeto también se puede pasar como atributo en una función.

Las últimas versiones de JavaScript nos permiten desglosar el objeto para acceder únicamente al atributo que nos interesa. Esto se consigue encerrando el nombre del atributo entre llaves { }.


```
<code>

```
Desestructuración del objeto.

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________


LECTURAS MAESTRAS:
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:





TEMA:Parámetros como referencia o como valor.
______________________________________________________

**RESUMEN**:
______________________________________________________
Javascript se comporta de manera distinta cuando le pasamos un objeto como parámetro.

Cuando los objetos se pasan como una referencia, estos se modifican fuera de la función. Para solucionar esto se puede crear un objeto diferente. Esto lo podemos hacer colocando tres puntos antes del nombre. Ej …persona.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________


TEMA:Comparaciones en JavaScript
______________________________________________________

**RESUMEN**:
______________________________________________________

Existen varias maneras de comparar variables u objetos dentro de javascript. En el primer ejemplo le asignamos a X un valor numérico y a Y un string. Para poder compararlos debemos agregar dos signos de igual (==). Esto los convierte al mismo tipo de valor y permite que se puedan comparar.

Cuando realizamos operaciones es recomendable usar tres símbolos de igual (===). Esto permite que JavasScript no iguale las variables que son de distinto tipo. Te recomendamos que uses el triple igual siempre que estés comparando variables.

Existen cinco tipos de datos que son primitivos:

Boolean
Null
Undefined
Number
String

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

PREGUNTAS:
______________________________________________________


TEMA: Funciones que retornan valores
______________________________________________________

**RESUMEN**:
______________________________________________________
En esta clase seguiremos trabajando con condicionales para desglosar las funciones en funciones más pequeñas que retornen un valor.

Debemos de tener en cuenta que el número 18 esta incluido dentro del rango de edad. Para ello utilizamos los símbolos >=.

Return detiene la ejecución de una función y devuelve el valor de esa función.

Las variables definidas con const se comportan como las variables, excepto que no pueden ser reasignadas. Las constantes pueden ser declaradas en mayúsculas o minúsculas. Pero por convención, para distinguirlas del resto de variables, se escribe todo en mayusculas.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

PREGUNTAS:
______________________________________________________

TEMA: Arrow functions
______________________________________________________

**RESUMEN**:
______________________________________________________
En esta clase aprenderemos a utilizar Arrow Functions que permiten una nomenclatura más corta para escribir expresiones de funciones. Este tipo de funciones deben definirse antes de ser utilizadas.

Al escribir las Arrow Functions no es necesario escribir la palabra function, la palabra return, ni las llaves.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA:Estructuras repetitivas: for
______________________________________________________

**RESUMEN**:
______________________________________________________
En esta clase estudiaremos una de las estructuras básicas de control. El bucle for, se utiliza para repetir una o más instrucciones un determinado número de veces.

Para escribir un bucle for se coloca la palabra for seguida de paréntesis y llaves.
Ej. for( ){ }. Dentro de los paréntesis irán las condiciones para ejecutar el bucle, y dentro las llaves irán las instrucciones que se deben repetir.

En este ejemplo la variable i la utilizamos como contador.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
PREGUNTAS:
______________________________________________________

TEMA:Estructuras repetitivas: while
______________________________________________________

**RESUMEN**:
______________________________________________________

Crea un bucle que ejecuta una sentencia especificada mientras cierta condición se evalúe como verdadera. Dicha condición es evaluada antes de ejecutar la sentencia
condicion
Una expresión que se evalúa antes de cada paso del bucle. Si esta condición se evalúa como verdadera, se ejecuta sentencia. Cuando la condición se evalúa como false, la ejecución continúa con la sentencia posterior al bucle while.
sentencia
Una sentecia que se ejecuta mientras la condición se evalúa como verdadera. Para ejecutar múltiples sentencias dentro de un bucle, utiliza una sentencia block ({ ... }) para agrupar esas sentencias.
En esta clase estudiaremos otra estructura repetitiva llamada while. While se ejecuta únicamente mientras la condición que se está evaluando es verdadera.

En ocasiones nuestro código puede fallar por errores de syntaxis o errores lógicos. En caso de que quieras verificar tu código, debes utilizar un debugger. El código se detiene cada vez que lee esta palabra.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
_____________________________________________________

TEMA:Filtrar un array
______________________________________________________

**RESUMEN**:
______________________________________________________

En esta clase aprenderemos como filtrar los arrays. Para filtrar siempre necesitamos establecer una condición. En este ejemplo nuestra condición es que la estatura de las personas sea mayor de 1.80mts.

El método filter ( ) crea una nueva matriz con todos los elementos que pasan la prueba implementada por la función proporcionada.

Recuerda que si no hay elementos que pasen la prueba, filter devuelve un array vacío.

Reto: escribe el filtrado de personas bajas.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________



TEMA: Asincronismo.
______________________________________________________

**RESUMEN**:
______________________________________________________

JS Asincrono y no bloqueanto con manejador de evento EventLoop.
Es la acción qu eno ourre al mismo tiempo.

Memory heap espacio en memoria compartido para la aplciación.
Pila de ejecución dond eneustras funciones esta´n peustas en ejecución.
La cola de tareas:
Evento Loop se encarga de vaciar primero pila ejecución y luego va a la cola de tarea.

NO HACER FUNCIONES MUY PESADAS par que se pueda liberar los callbacks.



```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


Qué significa ser un profesional de JavaScript?
Richard Kaufman trabaja para KickAss Partners como Senior Front End Engineer y es organizador de la comunidad de Javascript en Ciudad De México. Richard será tu profesor en este curso, él te va a enseñar Javascript puro, repasando los fundamentos clave del lenguaje, explorando APIs del DOM, implementando TypeScript y aplicando las mejores prácticas con Patrones de Diseño.

Vamos a necesitar:

Editor de textos Visual Studio Code.
Navegador Web Google Chrome.
Una CLI (terminal de linea de comandos)…
Es recomendable tener conocimientos en:

HTML
CSS
Básicos de Javascript
En la pestaña de Archivos y Enlaces encontrarás todos los cursos necesarios que forman parte de la EscuelaJS.

En este curso es el primer paso para convertirte en un profesional de Javascript que cumple con lo siguiente:

Conocimiento profundo del lenguaje, conocer sus particularidades y cómo funciona internamente.
Conocer los entornos de programación para Javascript.
Siempre aplicar las mejores prácticas.
Ser versado en código, leer código de otras personas.
Tener un set de herramientas que dominas.
Ética / Profesionalismo
Experiencia.

/////
**Que forma al profesional

Conocimeinto del lenguaje
Entornos de programación
Mejores practicas
Versado en codigo, herramientas, etica.


Promesas raise all
getters, setters
proxies
generadores.

Javascrip Engine
Herencia prototipal.
Event loop.

PREGUNTAS:
______________________________________________________
TEMA: 
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
*********************************************************************************************************************************************************************************
Curso de gestión de dependencias y paquetes NPM.
*********************************************************************************************************************************************************************************
Licencias. //
https://es.wikipedia.org/wiki/Licencia_de_software

Para iniciar nuestro primer poryecto con NPM
si quiero establecer un módulo para node.

mkdir jsnpm

npm init nos permite crear el archivo package-json que tiene un conjunto de documentación.
entrypint es el punto de entrada de nuestro proyecto. src/index.js
test command: Establecer scripts que son importantes para nuestros proyectos.
git repository. Si no establessco ningún punto, puede establecer el que esté clonado o en mi máquina.
keywords: Establecer palabras claves. Js, node, package.
author: Etrx


Puedo cambiar el nombre de package para tener diferentes configuraciones.
Puedo hacer npm init -y para realizar una configuración rápida.

Puedo realizar un 
npm set init.author.email "myemai@gmail.com"
npm set init.author.name "etrx"
npm set init.author.license "MIT"

Para que al inicializar pueda llenar estos datos de manera rápida.


INSTALACIÓN DE PAQUETES

Dependencias son recursos que usaremos en nuestros proyectos.

npm install moment (para fechas) --save esto significa que este aquete es necesario para vivir en producción. -dev nos permite establecer que el documentos solo es necesario en el entorno local y/o d edesarrollo.
NO MANDAR DEPENDENCIAS A PRODUCCION NI OMITIR LAS QUE SI.

en Node Modelus se instala todo. Se debe hacer el gitignore para esta carpeta de node y no enviarla a ningun repo.


Podemos crear nuevas dependencias como las de desarrollo.
Otro paquete que maneja fechas y datos es date.

npm install date-fns --save-dev

Cual es la diferencia de dependencias de desarrollo y las de producción?

-S mayuscula dice que es una dependencia que se guarda como parte del proyecto. Intalacion segura.

Debo instalar un paquete de forma global. Puedo correr una dependencia de manera local respecto al proyecto. A veces requiero que una dependencia pueda ser consultada en otros proyectos.

Nodemon nos permite crear un demonio que se encarga de siempre escuchar algun cambio o valor Y DEJA Y MANTIENE el proceso algún comando que estemos ejectuando de node.

debemso instalarlo con un flag.
sudo npm install -g nodemon

npm list -g --depth 0 me permite ver los paquetes que tengo isntaldos de forma global.

npm fund cuando se refiere a otros paquetes me habla de la financiación que peudo hacer a  algunos proyectos.


 INSTALACIÓN DE DEPENDENCIAS CON FORCE.

dEPENDENCIA NO INSTALADA pero queremos ver que ouput nos retornna. Es una simulación.

npm install react --dry-run

El flag force, nos permite isntalar la dependencia desde el último recurso de npm install webpack -f desde la última versión de npm.
Tener en cuenta, se force se intale pero no tiene que estar en dependencias de json.

Si toca modificar el archivo de json para las dependencias. Podemos hacer npm install para que se instalen todas las dependencias que teníamos en desarollo. Todo lo que se encuentre en pakache .json.

si conozco la versión particular que voy a utilizar. En un proyecto que necesita mantenimiento y estamos trabajndo con este.

npm install json-server@0.15.0 Hay que encontrar la versión  y leugo instalarlo.

ACTUALIZAR Y ELIMINAR PAQUETES.

Para saber si hay actualziaciones. npm outdate.
npm list me da la lista de lso paquetes.

Tener actualziadas las dependencias de nuestro proyectos da seguridad, y da garantias d elos últimos proyectos.

npm outdate --dd para ver todo el script que corre pro detras de nuestra máquina. Como hace fetcht a lso serves de npm, nos muestr las versioens de node, la sesión y la configuración d enuestro de proyect.

-dd sirve apra ver un output más detallado.

npm update me actualiza los paquetes.

hacer update de un paquete en particular npm install json-server@latest //Nos instala la última versión de se paquete.

¿Como desinstalo paquetes?
npm uninstall (nombrede paquete por eliminar)


Eliminar o disintalar sin quitar del pakakge.json.
npm unistall (nombrepaquete) --no-save

npm egamma nos permtie comprobar que una una dependencia está instalada o no.


VERSIONADO SEMANTICO Package lock y el uso los símbolos ^ y ~
https://platzi.com/clases/1763-npm/25054-package-lock-y-el-uso-los-simbolos-y/

NOTA: ver otra ves el asunto.

ele elemnto circunflex es un elemento para el versionado.

3 valores 
primero:
cambios grandes

segundo
cambios menores

tercero
parche bug fixing.

Eliminar el caret hace que todos se queden en la misma versión.

Package -lock nos permite entender que dependencias sen encuentran. Y establcer el versionado mejor.
Grantizamos 

EJECUTAR TAREA.

puedo crear en el package.json en la parte de scripts, un sccript  cuyo nombr entre parentesis signifique l oque sea. y a demáas puedo concatenar npm  entre si para que me ejecute diferentes tareas a la vez.

¿Podría mandar a llamar con este script un conjunto de paquetes que deseo sin la necesidad de llamarlos todos uno por uno?
Los llamo mediante npm run

comando por defecto.
npm test, es un alias para cualquier comando que esta´en test.
npm start me inicializa el archivo//NOTA de aquí que existiera un entry pint para mi proyecto.

SOLUCIÓN DE PROBLEMAS.

Pueden ser desde configuración, desde github, de x o y. 
Errores particulares npm.

verbose nos permite ver que está pasando a lo largo del mismo. (--dd)
el log de npm , copiar el enlace y pegarlos en code. LEER TODO para entendeer.

error de archivos mal instalados.
*Se elimina la carpeta
*Se limpia el caché. npm cache clean --force y se verifica npm cache verify.

error de corrupción en paquetes:
*Se elimina la carpeta. rm -rf nombredelpaquete.


instalar comando que permite borrar carpetas de nodemodules.
sudo npm install -g rimraf

para eliminar carpeta hago rimraf nombreddel paquete garantia de forma qcorrecta que se eliminó la carpeta.

SEGURIDAD

Debemos garantizar que no tenga ningún software malicioso.
Al descargar un proyecto debemso analizarlo.

si npm detecta en el npm install que hay paquetes sin actualizar nos arroja un error.
el que no muestre el error no necesariamente dice que sea seguro.

npm audit audita todas la cosas.
npm audit --json me meustra el json mas detallado.

para hacer update el paquete.
npm update nombre de paquete --depth 2		El nivel de profucndiad que quiero que s eme actualicen las dependencias del paquete.
comando para repar todas las vulnerabilidades. npm audit fix.

Herrameinta que me permite estar al día con mis proyectos, y dependencias actualizadas.
https://snyk.io/


CREACIÓN DE UN PAQUETE PARA NPM
https://platzi.com/clases/1763-npm/25059-publicar-un-paquete-en-npm/

Se crea el código en js. y en el proyecto se hace una carpeta de nombre bin. La carpeta bin me permite guadar la configuración de este paquete que se instala de forma global.
Y dentro d ebin creamos un global.js #! /usr/bin/env node le decimos con este símbolo que estará en bash y se ejecutará globalmente.


el bin se añade a package.json y como si fuera un objeto :{
	"nombre del paquete": ruta....

}
"preferGlobal": true que el paquete ser´globla.

PROBAR Y PUBLICAR PAQUETES

Estándo en la carpeta en al que creamos lo paquetes. hacemos

sudo npm link. Hago una referencia a este paquete hacia lo qu elo pueda isntalar de forma global, como si huiera venido de npm.

para llamarlo de forma global. en tereminal
nombre del paquete.

Otra forma de isntalarlo es desde la path. 
Primero se actualiza nuestro paquete.

npm install -g y la ruta dle directorio en pc.

Para publciar paquetes debemos ener un usuario en npm
https://www.npmjs.com/
https://docs.npmjs.com/packages-and-modules/


npm adduser

Añadimos
user
pass
email

npm publish lee configuración de pakacge.json 

mínimo standar para los paquetes dentro de npm.
1. Un buen readme.
2. Conectarlo con un repositorio para poderlo mandar.  Debo configurar primero el repositorio en github.
	luego hacer git add origin url
	luego npm init y me muestra en la configuración derepositorio la dirección de mi git.

Para realizar cambios de versiones.
npm version major
npm version minor
npm version patch
y se publica nuevamente con npm publish



PREGUNTAS:
______________________________________________________
******************************************************
CURSO JAVA SCRIPT PROFESIONAL
******************************************************
TEMA: Inicio de proyecto.
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

Usa un script live-server.

Para usar videos y botens. se usa querySelector.

Todos los elementos del DOM tienen una API.(mdnhtlmmediaelement)
Ej JS no existen las clases. Existen objetos que instanciamos a partir de otros.
Se instancia así:
	cosnt nombreObjetoIntanciadoRama = new NombreObjetoInstanciarRaiz

No embeber los videos en las clases.

Es mejro los objetos de configuración. Es mejor leerlos mediante this.media
this guarda un valor en la instancia de un objeto.

En los métodos de prototype peudo accede r a este valor.

PREGUNTAS:
_____________________________________________________


TEMA:Cómo llega un script al navegador
______________________________________________________

**RESUMEN**:
______________________________________________________


El **DOM **es la representación que hace el navegador de un documento HTML.

El navegador interpreta el archivo HTML y cuando termina de transformarlo al DOM se dispara el evento DOMContentLoaded lo que significa que todo el documento está disponible para ser manipulado.

Todo script que carguemos en nuestra página tiene un llamado y una ejecución.

Tanto con async como defer podemos hacer llamados asíncronos pero tiene sus diferencias:

async. Con async podemos hacer la petición de forma asíncrona y no vamos a detener la carga del DOM hasta que se haga la ejecución del código.
defer. La petición es igual asíncrona como en el async pero va a deferir la ejecución del Javascript hasta el final de que se cargue todo el documento.
Hay que tener en cuenta que cuando carga una página y se encuentra un script a ejecutar toda la carga se detiene. Por eso se recomienda agregar tus scripts justo antes de cerrar el body para que todo el documento esté disponible.




```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
Aprender formas de traer un script.

Scripts embebidos.
El server lee todo el documento para generar el DOM,, cuando llega a las líneas del script para y no termina de ejcutar hasta que la ejecución del script finalice.

¿Donde poenr el script?
Añadir  eñ elemento de script antes de finalizar la etiqueta de body para que encuentre todos lso elementos que necesita encotnrar.



Scripts Externos
Se añade atributo src y  sucede lo mismo pero hay un fetching que es como una petición.
Script Fetching ( Ir a buscar ) Ocurre Atributo async: y no detiene el procesameinto del DOM.
Script Execution pasa en cualquier moemnto.



Al tener scripts asincronos. amabs peticiones salen pero no se contestan a la msima vez. Depende del tamño del script. Se contesta entre más pequeño.
¿Pregunta: Si reduzco de tamaño mi código y lo modularizo de manera que todos mis script s s ejectuen en función de disminu´ión d etamaño, puedo optimizar el uso se recursos?


Script externos defer.
Es la forma para atraer scripts externos. Deferir la ejecución del js hasta el final de la ejecución del html. La petición ocurre asinconamente y sin detener el procesamiento del HTML. La ejecución ocurre al final.


TEMA:Scope
______________________________________________________

**RESUMEN**:
______________________________________________________
El Scope o ámbito es lo que define el tiempo de vida de una variable, en que partes de nuestro código pueden ser usadas.

Global Scope
Variables disponibles de forma global se usa la palabra var, son accesibles por todos los scripts que se cargan en la página. Aquí hay mucho riesgo de sobreescritura.

Function Scope
Variables declaradas dentro de una función sólo visibles dentro de ella misma (incluyendo los argumentos que se pasan a la función).

Block Scope
Variables definidas dentro de un bloque, por ejemplo variables declaradas dentro un loop while o for. Se usa let y const para declarar este tipo de variables.

Module Scope
Cuando se denota un script de tipo module con el atributo type="module las variables son limitadas al archivo en el que están declaradas.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

Tiempo de vida de existencia, evita que sin querer reescribamos el valor de una variable.

window : Es nuestro ambito global.
cuando las variables var existen  dentro de unciclo for, al correrlo lo que hará sera reemplazarlo en la variable var. si saco la función del scpe al llamarlo lo que hará será correr el ciclo for con normalidad

scope module: La vida de una variable está limitada al archivo donde vive la variable.






PREGUNTAS:
______________________________________________________

TEMA:Closures
______________________________________________________

**RESUMEN**:
______________________________________________________
Son funciones que regresan una función o un objeto con funciones que mantienen las variables que fueron declaradas fuera de su scope.

Los closures nos sirven para tener algo parecido a variables privadas, característica que no tiene JavaScript por default. Es decir encapsulan variables que no pueden ser modificadas directamente por otros objetos, sólo por funciones pertenecientes al mismo.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
Al combinar una función+scope generamso un clsoures.
IIFE Expresión funcional inmediata.
Closures nos permite hacer variables privadas.

Nos permite establecer valores predefinidos para tabajar funciones con estos valores, me oculta estos valores.


El primer plugin

Estrategia para añadir plugins.
Primero se escribe las cosas que va a hacer se importa y demás. Y luego es que se hace la función.



PREGUNTAS:
______________________________________________________
TEMA:this
______________________________________________________

**RESUMEN**:
______________________________________________________
this se refiere a un objeto, ese objeto es el que actualmente está ejecutando un pedazo de código.

No se puede asignar un valor a this directamente y este depende de en que scope nos encontramos:

Cuando llamamos a this en el Global Scope o Function Scope, se hace referencia al objeto window. A excepción de cuando estamos en strict mode que nos regresará undefined.
Cuando llamamos a this desde una función que está contenida en un objeto, this se hace referencia a ese objeto.
Cuando llamamos a this desde una “clase”, se hace referencia a la instancia generada por el constructo


```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Los métodos call, apply y bind
______________________________________________________

**RESUMEN**:
______________________________________________________
Estas funciones nos sirven para establecer el valor de this, es decir cambiar el contexto que se va usar cuando la función sea llamada.

Las funciones call, apply y bind son parte del prototipo Function. Toda función usa este prototipo y por lo tanto tiene estas tres funciones.

functionName.call(). Ejecuta la función recibiendo como primer argumento el this y los siguientes son los argumentos que recibe la función que llamó a call.
functionName.apply(). Ejecuta la función recibiendo como primer argumento el this y como segundo un arreglo con los argumentos que recibe la función que llamó a apply.
functionName.bind(). Recibe como primer y único argumento el this. No ejecuta la función, sólo regresa otra función con el nuevo this integrado.

Herencia Prototipal
Por default los objetos en JavaScript tienen cómo prototipo a Object que es el punto de partida de todos los objetos, es el prototipo padre. Object es la raíz de todo, por lo tanto tiene un prototipo padre undefined.

Cuando se llama a una función o variable que no se encuentra en el mismo objeto que la llamó, se busca en toda la prototype chain hasta encontrarla o regresar undefined.

La función hasOwnProperty sirve para verificar si una propiedad es parte del objeto o si viene heredada desde su prototype chain.
```
<code>

```

Las funciones son objetos en JS.

Parsers y el Abstract Syntax Tree
El JS Engine recibe el código fuente y lo procesa de la siguiente manera:

El parser descompone y crea tokens que integran el AST.
Se compila a bytecode y se ejecuta.
Lo que se pueda se optimiza a machine code y se reemplaza el código base.
Un SyntaxError es lanzado cuando el motor JavaScript encuentra partes que no forman parte de la sintaxis del lenguaje y esto lo logra gracias a que se tiene un AST generado por el parser.

El parser es del 15% al 20% del proceso de ejecución por lo que hay que usar parser del código justo en el momento que lo necesitamos y no antes de saber si se va a usar o no.





**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________
TEMA:Parsers y el Abstract Syntax Tree
______________________________________________________

**RESUMEN**:
______________________________________________________
El JS Engine recibe el código fuente y lo procesa de la siguiente manera:

El parser descompone y crea tokens que integran el AST.
Se compila a bytecode y se ejecuta.
Lo que se pueda se optimiza a machine code y se reemplaza el código base.
Un SyntaxError es lanzado cuando el motor JavaScript encuentra partes que no forman parte de la sintaxis del lenguaje y esto lo logra gracias a que se tiene un AST generado por el parser.

El parser es del 15% al 20% del proceso de ejecución por lo que hay que usar parser del código justo en el momento que lo necesitamos y no antes de saber si se va a usar o no.

Web no siempre ha sido igual, al inicio JS fue netscape, se leía línea por línea, un paso a la vez, la nueva forma llegó con google crhome. Reinventaron como funcionaba los mototes.

Reciben codigo fuente, lo analizan, lo recosntruyen en el AST, se compula a bytecode y se ejecuta. Se optimiza a machine code y se reempalza el código base.
Bytecode es un lenguaje de menor nivel.
Profiling data, analiza la ejecución mirando donde puedo opimizarlo, el optimizer compiler es el que lo ve.

 cuando falla deoptimizamos el codigo.

Un parser es 
uN LECTOR DE CODIGO FUENTE, LA DESCOMOPOSICION DEL USA TOKENS, los tokens ayudan a identificar el let, var, etc...
Cuando el parser lee el programa y no lo encuentra en AST se lanza un Syntaz Error, es cuando el motor de JS se encuentra con parte de código qu eno forman parte d ela sintexis del lenguaje al momento de analizar el código.

El proceso de parsig debe hacer bien. Es el 15%-20% al proceso de ejecución a mayor tamaño mayor parsing. La mayoría de JS termina no ejecutandose nunca. Esto hace que bundinling y code spliting sea muy importante. El código debe empaquetarse de forma eficiente, en archivos de código que se carga solo cuando es necesario.
 En single Page Ups.


Hay dos modos de parsear V8

Eager parsing:

Podemso saber qué variables se peuden leer en qué parte del código.
_________________________
Encuentra errores de sintaxis
Creat AST
Construye Scopes.

Lazy Parsing

______________________________
Doble de rápdio que el eager parser
No crea AST
Constrye escope parcialmente.


Demo-TOKENS.
____________
Al tomar un let foo = 2+2

Los tokens serían  

type: "KeyWord"
value "let"

...

type: "identifier
value: foo


_________



AST Abstrac Data types.

Es un grafo que representa un programa.
Se usa en 

JS engine
Bundlers: Webpack, Rollup, Parce
Transpilers Babel Transfora código de una cosa a otra 
Linters, ESLINTE, Pretiffy
TypeChekers, TypeScript, Flo,Syntax Highligthers.


Es posible crear reglas para el eslint mediante astexplroer. Podemos hacer las reglas como queramos. 


Cómo funciona el JavaScript Engine
___________________________________
Una vez tenemos el AST ahora hay que convertirlo a Bytecode.

Bytecode es como el código assembler pero en lugar de operar en el procesador opera en la máquina virtual V8 del navegador.

Machine code es el más bajo nivel, es código binario que va directo al procesador.

El profiler se sitúa en medio del bytecode y el optimizador

Cada máquina virtual tiene sus particularidades, por ejemplo V8 tiene algo llamado Hot Functions.

Cuando una sentencia función es ejecutada muy frecuentemente, V8 la denomina como una hot function y hace una optimización que consiste en convertirla a machine code para no tener que interpretarla de nuevo y agilizar su ejecución.

Cada navegador tiene su implementación de JavaScript Engine:

SpiderMonkey - Firefox
Chackra - Edge
JavaScriptCore - Safari
V8 - Chrome



Bytecode es parecido a assembley

Portatil
Ejectuado por una virtual Mahcin, opera aquí

Machine code
Es el más bajo nivel. Se trata de ceros y 1. NO hay que traducirlo. 
Binario Instrucciones especificas a una arquitecura o un procesador.

Profiler.
Toma observación de la ejecución y cuando ve que las llamadas son igual puede hacer optimizaciones.

Una función caliente es cuando se ha ejecutado mcho. Se puede optimizar a machine code.

Por eso es bueno usar que als funciones se llamen igual, para optimizar las funcioens. ( No me queda claro el proque al añadir una string se jode la cosa).

Event Loop
___________________________ 

El Event Loop hace que Javascript parezca ser multihilo a pesar de que corre en un solo proceso.

Javascript se organiza usando las siguientes estructuras de datos:

Stack. Va apilando de forma organizada las diferentes instrucciones que se llaman. Lleva así un rastro de dónde está el programa, en que punto de ejecución nos encontramos.
Memory Heap. De forma desorganizada se guarda información de las variables y del scope.
Schedule Tasks. Aquí se agregan a la cola, las tareas programadas para su ejecución.
Task Queue. Aquí se agregan las tares que ya están listas para pasar al stack y ser ejecutadas. El stack debe estar vacío para que esto suceda.
MicroTask Queue. Aquí se agregan las promesas. Esta Queue es la que tiene mayor prioridad.
El Event Loop es un loop que está ejecutando todo el tiempo y pasa periódicamente revisando las queues y el stack moviendo tareas entre estas dos estructuras.


JS se organiza mediante Stack y Memory.Heap ( Es un data strcututre es aleatorio, aqui se guardan variables, scopes)
Stack empeiza vacío y se le hace push(). EN el stack se detenta que tiene funcio a que.


PROMESAS
_______________________________________________
Para crear las promesas usamos la clase Promise. El constructor de Promise recibe un sólo argumento, un callback con dos parámetros, resolve y reject. resolve es la función a ejecutar cuando se resuelve y reject cuando se rechaza.

El async/await es sólo syntax sugar de una promesa, por debajo es exactamente lo mismo.

La clase Promise tiene algunos métodos estáticos bastante útiles:

Promise.all. Da error si una de las promesas es rechazada.
Promise.race. Regresa sólo la promesa que se resuelva primero.

tODAS LAS FUNCIOENS ASYNC REGRESAN UNA PROMESA


Getters y setters
_____________________________________________
Los getters y setters son funciones que podemos usar en un objeto para tener propiedades virtuales. Se usan los keywords set y get para crear estas propiedades.

Estas propiedades al ser funciones pueden llevar una validación de por medio y ser usadas con el operador de asignación como si fueran una variable más dentro del objeto.

Proxy
_____________________________________________

El proxy sirve para interceptar la lectura de propiedades de un objeto (los get, y set) entre muchas otras funciones. Así, antes de que la llamada llegue al objeto podemos manipularla con una lógica que nosotros definamos. Se hacemediante handlers.


Generadores.
________________________________________-

Porgramas cuya ejecucuión arranca sucede,e peude parar y vuelve a arrancar.
Los generadores son funciones especiales, pueden pausar su ejecución y luego volver al punto donde se quedaron recordando su scope.

Algunas de sus características:

Los generadores regresan una función.
Empiezan suspendidos y se tiene que llamar next para que ejecuten.
Regresan un value y un boolean done que define si ya terminaron.
yield es la instrucción que regresa un valor cada vez que llamamos a next y detiene la ejecución del generador.

function* es la sintaxis.

Las generator nos son ejecutables, hay que llamarla par que se ejecute.
Los genreadores traen una función next, es la forma de decirle, continua.

yield , ceder  lo que hace es generar la pausa,hay que ejecutar la función next n veces hata acabar.
	Incluso puedo regresar un valor con los yiedl

Generadores se prestan para generación eficientes


Fetch - Cómo cancelar peticiones
_____________________________________________________

La peticiones AJAX permitieron en su tiempo hacer peticiones asíncronas al servidor sin tener que detener la carga de la página. Hoy en día se utiliza la función fetch para esto.

Con fetch tenemos algo llamado AbortController que nos permite enviar una señal a una petición en plena ejecución para detenerla.


IntersectionObserver
_____________________________________________________
Sirve para observar elementos y si cruzan un umbral que nosotros definimos nos lo va a notificar para tomar acción.

El umbral se define por el porcentaje que tiene intersección con el viewport, con la parte visible de nuestra página.

VisbilitiyChange
_____________________________________________________
El visibilityChange forma parte del API del DOM llamado Page Visibility y nos deja saber si el elemento es visible, pude ser usado para ejecutar una acción cuando cambiamos de pestaña. Así podemos ahorrar batería y mejorar la UX.


Service Workers
_____________________________________________________




Sirven para hacer que nuestras aplicaciones funcionen Offline.

Muy usados en las Progressive Web Apps (PWA) los ServiceWorkers son una capa que vive entre el navegador y el Internet.

Parecido a como lo hacen los proxys van a interceptar peticiones para guardar el resultado en cache y la próxima vez que se haga la petición tomar del cache ese resultado.


```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________
¿ Si todas las abstracciones bnarias a lenguaje humano pues son representacioens binarias, Puedo crear un lenguaje de programación que haga la ingeniería inversa? (O eso es lo que hacen lso lenguajes?

Le digo que una isntrucción es un conjunto binario, que vos descascarando. Y escribo directament. Es decir, que a medida que vaya escribendo código, despues de compilar me lo pase a un archivo binario que equivale lo mismo a mi "print(hola mundo") Y luego pongo a correr ese archivo?



LECTURAS MAESTRAS:
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:





TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________


LECTURAS MAESTRAS:
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:

****************************************************************************************************************************************
_____________________________________________________

TEMA: DOM Document Object Model.
https://www.youtube.com/watch?v=6MKJzOrmpQo
______________________________________________________

**RESUMEN**:
______________________________________________________

Todos los elementos y otros recursos del propio navegador están modelizado en una estructura de objetos.
Cada objeto tiene una API estándar mendiante el que se pued emanipular lo que permite cambiar el estad d ela página mediante JS.

Por medio  de la jerarquía podemos acceder a métodos y las propiedades.


PROPIEDADES.

Son todas aquellas vairables que tienens lo objetos y podemos manipular.

NombreObjeto.Propiedad = Value.


Método:

Son funciones asociadas a un objeto.  

*Puedo asociar auna etiqueta un manejador de eventos. Através de un evento peudo detectar un suceso en la página, peudo asociarle funciones. Aquellas son manejadores de evento. Que poseen código que ejecuta funciones para ese evento.

como addeventListener.

******************************************TYPESCRIPT-`*************************
https://www.typescriptlang.org/docs/handbook/basic-types.html


TypeScript es un superset de JavaScript que añade tipos a nuestras variables ayudando así a la detección de errores de forma temprana y mejorando el autocompletado.

Los navegadores no entienden TypeScript así que lo vamos a transpilar a JavaScript usando Parcel.
https://parceljs.org/


Nos permite añadirle tipado.
Tipos básicos:

Tipos:

boolean. Valor verdadero o falso.
number. Números.
string. Cadenas de texto.
string[]. Arreglo del tipo cadena de texto.
Array. Arreglo multi-tipo, acepta cadenas de texto o números.
enum. Es un tipo especial llamado enumeración.
any. Cualquier tipo.
object. Del tipo objeto.



PATRONES DE DISEÑO:
___________________
Son soluciones generales ya probadas dentro de un contexto que las limita a problemas frecuentes que nos encontramos en el desarrollo de software.
Cuando tienes un martillo, todo parece un clavo.
Son soluciones para un problema dentro de un contexto repetitivo. El contexto es la situación donde el patrón aplica, esta situación debe ser recurrente. 
Ejemplo: mchos objetos están interesados en el estado de otro objeto.

Los patrones resuelven patrones dentro de un contexto recurrente.

Se refeiere a la meta que estás tratando de alcanar dentro del contexto, el problema incluye todas las limitaciones que existen dentro de este contexto.
ej: Estos objetos quieren reciir notificaiones cuando cambie el estado sin tener que solicitar la inforamción.


Una solución debe ser genérica, que alcanza la meta dentro de un contexto
Crear una clase donde cualqueir objeto se puede suscribir y desuscribir a cambios en el estado.

Observer pattern:

Ejemplos:
*********

every layout.dev  // Como acomodar los patrones de una pagian.
mediaqueri.es 


La idea de patrones de diseño comienza en la arquitectura con Crhistopher Alexander.
Sus libros escribem patrones para construir arquitecrua dinámica, como casa, pueblos y ciudades.
RECONOCER PATRONES PAR ACONSTUIR UN LENGUAJE.

Design Patter Element of Reusable Object-Oriented Software // Buscar.

Beneficios.
Los patrones de diseño son una caja de herrameintas de soluciones bien probadas a problemas comunes en diseño.

Te proveen un lengueje comun que permite comunicarse de forma específica y eficiente.

CRITICA.

Los patrones de diseño son una forma de complejidad.
Son solucioens a las limitaciones de un lenguaje de programación, Java o C# no tiene funciones de alto ivel
Cuando lo que tienes es un martillo... todo parece un clavo.

Los patrones como todo tipo de complejidad hay que evitarlos hasta que sea obsolutamente necesario.

CONCLUSIÓN
Siempre buscar pensar en terminos de diseño no de patrones
Un patrón cuando hay una necesidad natural para usarlos.
Si existe una alternativa mas simple prefierela.



Categoría de patrones de diseño


Patrones creacioneales: 
_____________________-
Proveen diferntes formas de crear objetos


Abstrac Factory
Builder
Factory Method
Prototiyoe
Singlenton:Es un patrón que te asegura que una clase solo tiene una instancia. Esta única instancia puede ser consumida por cualquier otro objeto.// Es unica instancia puede ser consumida por cauquier otro objeto. Solo crea una instancia de si misma. notación UML.

Caso de USO.

Mongoose es un ORM es una librería que te ayduda a interactuar con una base de datos de Mongo DB
Te provee con una interfaz simple apra buscar, escribir y valida datos.
En este tipo de libería solo quieres tener una isntancia.




Builder:
Es usdo para permtiir la creación de una variaded de objetos complejos desd eun objeto fuente.

Sepra la creación de un objeto complej de se estructura, de tal forma que el mismo proceso de construcción peude servir para crear representaciones diferentes.
e permite crear varios objetos de un objeto fuente. Jquery usa este patrón apra crear sus objetos.


Patrones Estrcuturales:
_____________________

 Describen formas de componenr objetos para formar nuevas estructuras flexibles y eficientes:


Adapter: Expone una interfaz externa, y esconde una itnera que es complejo.
Bridege
COmpsoite: Sin importar si tengo un arreglo o no, lostrato a todos igual.
Decorator:Añade nuevas responsabilidades a un objeto de forma dinámica permitiendo así extender su funcionalidad sin tener que usar subclases. 

Un entidad de software, clase, modulo, función, debe quedar abierta para si extensión pero cerrada para su mdoificación.




Facade
Flyweiht
roxu




Patrone Comortamiento
_________________________
 forma s de poder manejar algoritmos, funcionalidades, relaciones.

Chain of responsibility
Command
Interpreter
Iterator
Meidator
Memento
Observer
State
Strategy
TemplateMethod
Visitor.









¿Cómo funciona el Patrón Observer?

El patrón observer se compone de un sujeto que ofrece mecanismos de suscripción y desuscripción a múltiples observadores que quieren ser notificados de los cambios en dicho sujeto. Cada observador expone un método de update que es usado por el sujeto para notificar cualquier cambio a todos los suscritos.

Es uno de los patrones más utilizados, algunos ejemplos típicos son:

Newsletter
Sockets
Listeners en páginas web





// 
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________



Do it for her


TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________


LECTURAS MAESTRAS:
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:





TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





EXÁMEN:
______________________________________________________


¿Qué es un closure?
d

¿Qué pasa cuando tres de las promesas en Promise.race se resuelven?
d NO--->b

¿Qué ámbito tiene la variable person en el siguiente código?

fullName(person) {
return `${person.firstName} ${person.lastName}`;
}

b  NO--->d

¿Con qué keyword un generator puede detener su ejecución?
c

¿Cuál es la diferencia entre var y let al ser declaradas en una función?
c NO--->b NO---->d

¿Cómo pasamos los argumentos a una función utilizando bind?
b NO---->a NO---d

¿Cuál event disponible en los service workers usas para pre-cache de assets de una página y prepararla para funcionar offline?
a

¿Cuál es la sintaxis correcta para definir un getter?

b NO--->c


¿Cuál de estas operaciones puede ser interceptada por un Proxy?
a


¿Cómo pasamos los argumentos a una función utilizando apply?
a NO---->c

¿Qué pasa cuando una de las promesas en Promise.all es rechazada?
d---NO---->b NO.----->c

¿Qué "clase" usamos para crear un signal que sirva para detener un fetch?
d

¿Qué nuevo API del DOM nos ayuda a saber, de forma eficiente, si un elemento se encuentra dentro del viewport?
a


¿Cuál de estos define mejor qué es un patrón de diseño?
d NO--->b



Tienes un estado global y varios objetos que quieren enterarse de cambios al estado. ¿Qué patrón usarías?
a NO--->b


¿Qué hace el keyword new?

d no!.--->b

Necesitas una clase de la cual solo exista una instancia. ¿Qué patrón usarías?
c


¿Cómo se llama la estructura de datos que representa un versión del código que el interpretador puede procesar?
a

¿Qué atributo usamos cuando queremos que la petición de un script sea asíncrona pero que tan pronto termine de cargar, el script se ejecute?

b


¿Qué valor le tenemos que asignar a

<script src="index.js" type="...">
para que el archivo no añada valores al ámbito global?

a NO --->d


¿Cómo se llama el motor de JavaScript que usa Node y Chrome?

d


¿En qué categoría encontramos al patrón de diseño Observer?
a


¿Qué queue tiene mayor prioridad?
d


Quieres extender el comportamiento de una clase sin modificar su implementación. ¿Qué patrón de diseño te puede ayudar?
c NO --->a

¿Cuál de estos es el objeto que heredaran las "instancias" de un objeto?

c

¿Cómo pasamos los argumentos a una función utilizando call?
a NO ----->b

Eres el desarrollador de un e-commerce. En la página hay un carrusel que muestra los artículos con descuento y automáticamente cambia de slide. Cuando el usuario cambia de tab, tienes que asegurarte que el carrusel se detiene. ¿Qué API del DOM usarías para detectar si el tab del e-commerce sigue activo?
d


Considera el código

import MediaPlayer from '@sparragus/platzimediaplayer'
¿Cuál propiedad del package.json define el archivo de la biblioteca que sería importado?
b NO---->b NO....>c
