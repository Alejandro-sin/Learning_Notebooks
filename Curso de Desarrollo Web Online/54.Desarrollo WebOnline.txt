
LECTURAS MAESTRAS:
https://developer.paypal.com/docs/paypal-payments-standard/integration-guide/Appx-websitestandard-htmlvariables/#paypal-checkout-page-variables
https://developer.paypal.com/docs/paypal-payments-standard/integration-guide/formbasics/#specifying-button-type--cmd
RESÚMEN MAESTRO:
GLOSARIO UNIVERSAL DE TÉRMINOS:
ATAJOS:



__________________________________________________________________________________________________
TEMA: 
________________________________________________________________________________________________________________
PREGUNTAS/GLOSARIO:		
_________________________________________________________________________________________________________________
NOTAS:_____________________________________________________________________________________________________

Seguir las redes sociales de todos mis profesores de Platzi. Y tratar de socializar con ellos. Preguntar.
RESUMEN:
_________________________________________________________________________________________________________________
BLOG IDEAS:

__________________________________________________________________________________________________
TEMA: ¿Qué es desarrollo web?
________________________________________________________________________________________________________________
PREGUNTAS/GLOSARIO:		
_________________________________________________________________________________________________________________
NOTAS:_____________________________________________________________________________________________________
Poner en mi ruta, UX.

Front pasa el diseño del diseñador a código, colores formas tamaños.
Enlazarse con los eventos del usuario y la página web.
Arquitecto frontEnd. Se encarga de las interfaces UI.
Desarrolladores Js.

Backend, resguarda y asegura. Deriva en SisAdmind.DevOps. Etc. Para pakend es indispensable en el sentido estético.

FrontEnd requiere:
html  Lenguaje demarcado para ws.Convenciones de etiquetado.
css depuran código, revisando si está bien y no. Diseño hecho código.
js.



DOM
Document Objet Model.
Modelo de documento que se carga en el navegador web y que represtena del docuemtno como n ñarbol de nodos.
Un front ve encabezados, proyectos, menú, cuerpo, footer, title,meta.

***********Etiquetas*************************

Las etiquetas son la representación básica de la información en un documento html. Sirven para crear y organizar el contenido.
La sintaxis general de una etiqueta es:

<nombre>contenido</nombre>
Hay ciertas etiquetas que tienen una sintaxis diferente, ya que se cierran en sí mismas; es decir, no tienen etiqueta de cierre:

<nombre />
Algunas de las etiquetas más conocidas y usadas son:

Etiquetas de cabecera (head):

doctype: indica al navegador el tipo de documento que se está mostrando.
html: es la etiqueta que envuelve todo el documento
head: es la cabecera del documento y contiene sub etiquetas que describen al documento o incluyen recursos adicionales.
Etiquetas del cuerpo del documento (body):

article: diferencia partes del contenido que pueden vivir por sí mismas.
nav: para hacer menús de navegación.
aside: contenido menos relevante, como publicidad, etc.
section: sirve para diferenciar las secciones principales del contenido.
header: cabecera del documento.
footer: pie de página del documento.
h1 - h6: títulos de nuestro sitio web. H1 principal, H6 secundario.
table: tablas de contenidos, similar a la estructura de las hojas de calculo.
ul y ol: listas de items.
div: cualquier división para organizar el contenido.
hr: Línea horizontal.
span: sirve para dividir a nivel de textos.



**RESUMEN**:

Etiquetas son usadas para generar cualquier contenido con el que podamos interacturar. Existen diferentes grupos de etiquetas.
<nombre_e> contenido </nombre>  Esta es la sintaxis para cualquier etiqueta.
No todas las etiquetas de abres y cierrran. Aquellas que se abren y cierran en sí mismas poseen esta sintaxis:
<nombre/>
Algunas etiquetas tienen atributos.
______________________________________________________

Existen grandes grupos (padres) de los que derivan todas las etiquetas:
Head, Sections, Grouping, Tables, Forms, Forms2,  Emebedded, Text Level, Text Level 2, Interactive, Edits.


_________________________________________________________________________________________________________________
BLOG IDEAS:
_______________________________________________________________________________________________
TEMA:Estructura de nuestro Sitio Web
______________________________________________________

**RESUMEN**:
______________________________________________________

Lo primero es tener en cuenta que por buenas prácticas, todo proyecto debe tener un "index.html", es recomendable guardar inicialmente el documento de trabajo con esta extensión con el propósito de que por defecto el editor de código entienda de qué tipo de docuemnto se trata.
Al escribir "html:5" por defecto el editor devuelve una estructura predeterminada que empieza por DOCTYPE.

section: secciones de todo el contenido.
nav: para crear un menú de navegación
Dentro
______________________________________________________
ol :listas ordenadas (Ennumera elementos)
ul :listas desordenadas (No ennumera elementos)
Dentro de las listas
______________________________________________________
li :List items
a : Anclas (anchor) o enlaces que pueden ser externas o internas.

**Atajos**
______________________________________________________

alt+shitf+flecha :abajo se duplica el código.
ctrl+z :reordena lineas de código en la identación.

```
<code>

```

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
Estructura básica HTML.
<html>
  <head>
    <title> Título de la página title>
  head>
  <body>
    <header> Cabecera del contenido header>
    <section> Sección principal section>
    <section> Otra sección section>
    <footer> Pié de página del documento footer>
  body>
html>

PREGUNTAS:
______________________________________________________

TEMA: Atributos HTML
______________________________________________________

**RESUMEN**:
______________________________________________________


Las etiquetas pueden recibir atributos que los personalian, son funciones extendidas.
los atriutos viven dentro de las etiquetas y su estructura es 

```
<etiqueta atributo="">

```
El favicon es el ícono que posee nuestra página en el explroador. Se hace con etiqueta Link en la zona de head.
Los navegaodres poseen conflictos entre idiomas y hay que decirle explícitamente qué lenguaje trabaja, por lo que en la etiqueta html se usa el atributo lan="es" para español.
Si usas el atajo al escribir html:5 + tab para usar la plantilla del editor, por defecto el atributo de la etiqueta html lang="en" estará en ingles.
Teniendo en cuenta que existe UTF16 UTF32, el Chartset UTF8 es el más recomendado por asunto de compatibilidad. Solo puede usarse un conjunto de caracteres. 
Las imágenes que se usan deben tener un redimensionamiento para que ocupen el espacio justo en el proyecto.


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

PREGUNTAS:
______________________________________________________

TEMA:Formas de agregar estilos a HTML
______________________________________________________

**RESUMEN**:
______________________________________________________

Estilos tienen una relevancia diferente, tiene más jerarquía los estilos dentro etiquetas que los selectores.





Hay tres opciones para incluir estilos que definan la apariencia de tu html:

Estilos en línea: se definen directamente en el elemento html que quieres estilizar, se agregan con el atributo style.
Estilos con el tag Style: regularmente este tag se incluye dentro de la etiqueta head del html.
Estilos enlazados desde un archivo css externo: utilizando la etiqueta link que nos permite enlazar recursos externos.
A CSS, se le llama hojas de estilos en cascada porque los estilos que se definen para una página, se van aplicando de arriba hacia abajo, y de lo más general a lo más particular, teniendo prioridad lo más particular. Esto es, los estilos que prevalecen son los que han sido definidos en línea, luego los que fueron definidos mediante la etiqueta style en la cabeza o cuerpo del html, y por último los estilos definidos en archivos externos enlazados con la etiqueta link. Esta prioridad se puede alterar al usar el modificador **!important"" en la definición de algún estilo en particular, aunque esto no es recomendado

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Reglas, selectores, declaraciones, propiedades y valores de CSS
______________________________________________________

**RESUMEN**:
______________________________________________________

Por buenas prácticas de legibildiad en el codigo es ideal trabajar los estilos separados del html.

**Reglas**:  Las reglas de css están conformadas por Selectores, Dlecaraciones, Propiedades, Valores.
**Selectores**: Es una forma de identificar elementos HTML.
**Declaraciones**: Es todo lo que hacemos con el selector.
**Propiedades**: Particularidades de los elementos.
**Valores**: Es aquello que espera recibir como variables las propiedades para hacer las cosas.

Selector hará referencia a la parte en HTML. Header, Body, Section, etc.
Declaración es todo lo que va dentro de {}
Propiedades lo que está dentro, background, color,etc. Para llamar más propiedades las separamos mediante ";"
Valores el valor asignado a dicha propiedad.
______________________________________________________
**Selectores de etiquetas**: Elije a las etiquetas en el HTML.
**Selector de descendente**: body header div nav... habla sobre toda la jerarquía.
**Selector de id**: #NombreId
**Selector de clase**: .NombreClass
Una clase es un atributo en HTML. (class="link" existe como atributo dentro de las etiquetas)
Los elementos class pueden repetirse a lo largo del html.
______________________________________________________

```
<code>

```
**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
PREGUNTAS:
______________________________________________________

TEMA:Los estilos incluidos por el navegador
______________________________________________________

**RESUMEN**:
______________________________________________________
Agregando clases a los componentes escritos en HTML

Por buenas prácticas se recomienda agregar clases  mediante el atributo class.
Un elemento HTML puede tener diferentes clases, se deben indicar mediante un espacio en blanco.
Hay  una nota muy importante en este tema: **ASIGANCIÓN DE NOMBRES-CLASS**
Por buenas prácticas se recomienda que al asiganr las clases, las etiquetas hijo, posean atributos class con la raíz del nombre primordial.
Existen estándares para la escritura de código, como el Objetc Oriented CSS, BEM, SMACS.

```
<code>

```


**REFERENCIAS**:
______________________________________________________
https://www.keycdn.com/blog/oocss
http://getbem.com/naming/
https://www.sitepoint.com/introducing-ccss-component-css/
______________________________________________________
**NOTAS**:
______________________________________________________

PREGUNTAS:
______________________________________________________

TEMA:Unidades de medida y colores
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```
Hay varias unidades de medida con las que se puede trabajar en CSS: %, em, rem, px, pt, fr, vw, vh
Las medidas más comunes y utilizadas son los pixeles. Un pixel es la menor unidad homogénea en color que forma parte de una imagen digital. Es la unidad más práctica y fácil de utilizar y manipular, y es la que utilizaremos mayormente en este curso.

Los colores en CSS pueden ser representados de al menos tres formas diferentes:

Representados con palabras claves para cada color, como: red, green, blue, pink, yellow, black, etc.
Usando la composición de tres colores (rojo, verde y azul): para esto podemos usar notación exadecimal o las funciones rgb() y rgba().
Usando la composición mediante valores de Matiz, Saturación y Luminosidad con: hls() y hlsa().
Con respecto a los valores hexadecimales, cada color está representado por 6 digitos, que representan 3 pares de hexadecimales: FF - FF - FF (rojo, verde y azul), en el que cada par puede tomar valores hexadecimales entre 00 y FF. Cada uno equivale a valores decimales entre 0 y 255, donde 0 es la ausencia de ese color y 255 la mayor cantidad disponible. De esta manera cada color se forma por la combinación de diferentes proporciones de rojo, verde y azul.

#000000 es equivalente a Negro
#FF0000 es equivalente a Rojo
#00FF00 es equivalente a Verde
#0000FF es equivalente a Azul
#FFFFFF es equivalente a Blanco

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Margin, Border, Padding.
______________________________________________________

**RESUMEN**:
______________________________________________________

Así como el margen separa a los elementos html entre sí, la propiedad padding de relleno, permite definir una separación entre el contenido interno y el borde de un elemento.

Al inspeccionar los elementos html en el navegador, se puede apreciar el margin con color naranja y el padding con color verde.

Una forma de identificar cuándo es mejor usar margin o padding en un elemento, es evaluando la necesidad de usar borde o background, ya que son éstos: el borde y el background, los que realmente diferencian el uso de uno u otro.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Modelo de Caja.
______________________________________________________

**RESUMEN**:
______________________________________________________
El modelo de caja es un concepto teórico de css que representa a cada elemento html en base sus propiedades de: margin, border, padding y dimensiones (alto y ancho).
Para visualizar un elemento html en su representación como modelo de caja debemos irnos a la parte baja de la sección styles del inspector de elementos, o en la sección llamada Computed.

En el modelo de caja, el ancho total de un elemento html equivale a la sumatoria de los valores de: width, padding-left, padding-right, border-left-width, border-right-width. De manera similar aplica para el alto total de cada elemento. Aunque margin-left y margin-right, forman parte del modelo de caja, no se incluyen para el calculo del ancho total.

Con la propiedad box-sizing, y en particular con el valor border-box de esta propiedad, podemos modificar el comportamiento del modelo de caja para que nuestro elemento nunca supere el tamaño máximo que le hayamos definido en width y height. Esta es la opción recomendada para trabajar.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Tipos de display
______________________________________________________

**RESUMEN**:
______________________________________________________
Display es la propiedad de css que indica cómo debe ser mostrado un elemento html. Todos los elementos tienen algún tipo de display. Si un elemento no se ve en pantalla es porque seguramente su display es none.

Los valores más comunes que puede recibir la propiedad display son:

block: el elemento intenta abarcar todo el ancho posible.
inline: reduce su tamaño exclusivamente hasta lo que abarca su contenido, descartando las propiedades width y height.
inline-block: combina lo mejor de block e inline, ya que respeta las dimensiones indicadas en las propiedades width y height, pero coloca el elemento en línea (al costado) de elementos hermanos que también tengan display: inline o inline-block.
flex: asume algunas propiedades por defecto que favorecen la alineación de los elementos internos.
grid: similar a flex, asume algunas propiedades por defecto organizando los contenidos en filas y columnas.
none: oculta el elemento.
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Propiedades de flexbox
______________________________________________________

**RESUMEN**:
______________________________________________________
Flexbox se refiere al tipo de display en css que permite un manejo flexible de la alineación, dimensionamiento y distribución de elementos html.

Esta propiedad se aplica a un elemento padre, pero va a afectar principalmente a sus elementos hijos directos. Por defecto, los elementos internos quedan alineados unos seguidos de los otros. El comportamiento del modelo de caja de estos elementos hijos también se ha modificado, ya que pierden el efecto de su propiedad margin.

Los elementos hijos de un padre con propiedad display: flex tienen a su disposición algunas nuevas propiedades que aportan mayor flexibilidad a su comportamiento. Una de estas propiedades es flex-shrink que, junto a la propiedad flex-wrap del padre, permite adaptar y distribuir los elementos de manera dinámica en el espacio horizontal disponible hasta ocupar todo el espacio, y luego pasar a ocupar dinamicamente las siguiente filas hacia abajo

Alineando elementos de forma horizontal
La propiedad de css que nos permite definir la forma en que se alinearán o distribuirán los hijos de un elemento al que se le ha asignado un display flex es: justify-content. Y puede tomar entre otros valores, los siguientes:

flex-start: para alinear todos los elementos hacia el inicio del espacio disponible.
flex-end: para alinear todos los elementos hacia el final, a la derecha.
center: para alinear todos los elementos al centro del espacio disponible.
space-between: para distribuir los elementos con un espacio proporcional e igual entre ellos.
space-evenly: para distribuir los elementos con un espacio proporcional e igual entre ellos (incluyendo el primer y último elementos con respecto a los extremos del espacio disponible).
space-around: similar a space-evenly pero tanto en el primero como en el último elemento, el espacio hacia los extremos es la mitad del espacio usado entre los elementos.

Alineando elementos de forma vertical

Similar a como sucede con justify-content, es posible alinear y distribuir los elementos internos en el espacio vertical disponible usando la propiedad align-items, que puede tomar también los valores de: flex-start, flex-end y center.

Algo que es muy importante y se debe tener en cuenta a la hora de usar align-items y justify-content es que dependiendo de la propiedad flex-direction que se haya definido, el efecto de ambos se invierte, no en cuanto a sus elementos internos, sino en cuanto a si se debe usar uno u otro de manera vertical u horizontal.

IMPORTANTE: Cuando la propiedad flex-direction se ha definido como column, la propiedad justify-content ya no va a aplicar sobre la alineación horizontal, sino sobre la vertical. Y align-items ya no aplicaría sobre la alineación vertical sino la horizontal. Se intercambian sus efectos.

Para centrar completamente los elementos internos de manera vertical y horizontal en su elemento padre, debemos usar el valor center en ambas propiedades.

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA: Conceptos elemntales de Responsive Desging.
__________________________________________________

**RESUMEN**:
______________________________________________________
Son todas las técnicas queusamos para adapatar nuestras aplicaciones web a la mayor cantidad de pantallas.
Existen diferentes patrones, tu sitio web puede incluir diferentes patrones.

MostlyFluid 
Colocación de columnas (Column Wrap)
Layout Shifter
Tiny Tweks
OffCanvas


viewport: Es el área visible del navegador.
ortait-Landascape. Vertical, Horiontal. Celular.
Depende del target:

Mobil First. Empezar un website desde la menor resolución.
Desktop first: Empezar desde la mayor resolución.

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA: Herramientas de desarrollo Responsive
______________________________________________________

**RESUMEN**:
______________________________________________________


En esta clase se hace una presentación de las herrameintas que nos permitiran desarrollar en responsive, para acceder a ellas, puedes ir mediante el inspector de elementos, o mediante ctrl+shift+i, y hacer click en el ícono de "toogle." En el menú del inspector. Ahora, puedes acceder a este mediante ctrl+shit+m. En las opciones de estas herramientas podrás poner reglas, ajustar el tamaño a diferrentes marcas de celulares (los más usados) para probar diferentes tamaños. Así como realziar capturas de pantallas de todo el proyecto.


```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________



PREGUNTAS:
______________________________________________________

TEMA:Meta viewport
______________________________________________________

**RESUMEN**:
______________________________________________________

Meta vi	ewport es una etiqueta de metadatos que permitirá configurar el website para que sea visible en dispositivos de menor tamaño. Permite conservar la legibilidad de tu página web al variar el escalado de tus contenidos.

Si usas por defecto el comando html:5 por defecto la etiqueta viewport se carga, con atributo name y content. 
El atributo content puede tener dos parámentros puede ser:

**parametro1**.
"width=X" fijo con un tamaño en X pixeles predeterminado.
"width=device-width":Se ajusta respecto al tamaño del dispositivo en que se carga

**parámetro2**.
initial-scale:Valores de 0-1 equivalente a (0-100%)
```
<code>

```
**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA:Medidas relativas útiles en Responsive Design
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```
En esta clase aprenderás las medidas que existen en el campo del responsive design.

Lo primero que debes tener en cuenta es que estas medidas son maleables, en la medida en que dependen de su fuente de origen o medida madre. Entre ellas se encuentran el porcentaje (longitud referente al tamaño de los elementos padre), los em (unidad relativa al tamaño de fuente especificada más cercano), los rem (unidad relativa al tamaño de fuente especificada en el ancestro más lejano, como html o body) y tamaños del viewport vw/vh (longitud relativa porcentual con respecto al viewport).



**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA: Media queries
______________________________________________________

**RESUMEN**:
______________________________________________________


@media media type and (condicion){} Se componen de un media type y una o más condiciones

Para que logres los resultados que deseas en tus proyectos, es necesario cambiar ciertas propiedades para modificar el tamaño de los textos, contenidos y hojas de estilo; la manera de hacer esto es el media queries.

El media queries es un módulo de css que hace posible al responsive design, éste existe desde el 2010 y se encarga de adaptar la representación del contenido a características del dispositivo.

En esta clase conocerás cómo funciona su estructura, cómo se construye y adquirirás los conocimientos necesarios para trabajar con él, desde tu editor de código.


Formas de incluir media queries

En esta clase aprenderás a insertar un media querie en tu proyecto. Para ello, vas a trabajar sobre tu hoja de estilos, utilizando el tag style.

El primer paso para lograr esto será realizar una nueva hoja de estilos en tu proyecto, ésta debe contar, en primer lugar, con la etiqueta link; harás uso de la aplicación de medidas para la pantalla, bordes y colores, entre otras características.


La forma de incluir media queries en los proyectos se puede hacer de diferentes formas. Inciialmente se puede escribir  dentro de la hoja de html, sin embargo por buenas prácticas es recomendable cargar una hoja de estilos para escribir allí.
Se empiza por la etiqueta link para generr la conexión entre las hojas HTML y CSS y posteriormente se debe tener en consideración lo siguiente:

Si tu proyecto es Desktop first: Empezar por los tamaños-resoluciones mayores a menores es decir: 1024-768-480-320 (px)
Su tu proyecto es Mobile First debes emepezar por las resolcuines pequeñas a las grandes.


```
<code>

```
 

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA:Diseño elástico con max-width y flex-wrap
______________________________________________________

**RESUMEN**:
______________________________________________________

En esta clase se entiende la utilidad del flex wrap, nos facilita el ordenamiento de nuestros textos, bloques, secciones de manera qe la información no se solape al variar el tamaño de la panatalla.


```
<code>

```
Como te habrás dado cuenta tu proyecto está desordenado aunque carga en el viewport. Por esta razón en esta clase aprenderás a ordenar tu proyecto por medio del uso de contenedores flexibles, que varíen su tamaño según la amplitud con la que cuentan en diversos dispositivos y permitan una óptima visualización.

Por otro lado, para hacer esto posible, aprenderás a aplicar las etiquetas de max-width y flex- wrap; éstas también te ayudarán a evitar que tu usuario necesite navegar la página de forma horizontal, pues la información se organizará en forma vertical para facilitar la experiencia.


Ajustando el header:
___________________

En esta clase aprenderás a trabajar sobre tu proyecto, sección por sección.

La primera de ellas será el header. Para esto inspeccionarás los elementos del header y su menú (alto, contenedor, ancho máximo, media queries, alto…).

Adicionalmente, aplicarás etiquetas y elementos como flex, padding, width, display, display blog, justify-content, align-items, header ol li, figue, images, menús, entre otros.

Ajustando nuestro portafolio:
____________________________


Para modificar tu proyecto en cuanto a los contenedores y la información, necesitarás usar la etiqueta project y project-details, así como harás uso de las herramientas relativas que conociste en las primeras clases de este curso.

En esta clase aprenderás cómo lograr estas modificaciones, asimismo, conocerás la manera en que se heredan las características en tu línea de código y cómo generar cambios en este orden sucesivo, para que los elementos puedan cambiar y sean mucho más flexibles, ya sea en cuanto a sus textos, márgenes o imágenes.

Posiciones:
static: left bottom top rigth z-index
relaative Se desbloquea el z index- top rigth bottom left
absolute toma el máximo, puede hacerse absoluto a una zona realtiva
fixed se fija en la pantalla.
sticky 

z-index me permite superponer uno sobre otro.

**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________


PREGUNTAS:
______________________________________________________

TEMA: Insertar videos.
______________________________________________________

**RESUMEN**:
______________________________________________________

Video insertado

Etiqueta video que es físico.
inframe. Externas

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA: CSS GRID. MAQUETACIÓN
______________________________________________________

**RESUMEN**:
______________________________________________________

Recapitulación.
CCS 
No es un lenguaje de programación, es un lenguaje que me permtie dar estilos a lo que maquetamso en HTML.
Usamos  selectores de etiquetas solo por la palabra, selectores de clase mediante .nombredeClase, y por ID mediante #nombreId
DevTools:
Es una serie de herramientas que faciltian el proceso de desarrollo. Podemos ver en tiempo real que estamso haceindo con CSS,JS, podemos ver peticiones, imagenes y demás. Incluso podemos hacer debuggin para hallar problemas al momento de renderizarse.

Html semántico habla de unas etiquetas que nos brindan un función establecida.
Header, Fooer, Nav.

Etiquetas contenedoras
dos tipos
contenedoras
cajas, header, na, main, footer, boddy.

contenido
texto, videos, etc.

Es buena práctica generar contenido de etiquetas.
layout, display forma en que etiquets se comportan entre ellas.

Display grid y Flex, existen para solucionar posiciones.


Navegadores poseen unas caracteristicas por defecto.
a las etiuquetas contenedoras.

Para resetear todos lso estilos de navegador *{
margin
padding...

GRID
POSICIONAR ETIQUETAS CONTENEDORAS

FLEX
POSICIONAR EL CONTENIDO DE LAS ETIQUETAS CONTENEDORAS



```
<code>

```
CRUD
Create Read Update Delete

Interne t es un conjunto descentralizado de redes de comunicación interconectadas.

Protocolos.
Conjunto de reglas y pautas para establecer reglas de comunicación entre si.

FTP
tranferencia de archivos entre sistemas conectados a una red


p2p
Una computadora funciona como servidor y cliente.

Tecnología de la informaicón.
Es la aplicacion de ordenadores y equpos de telecomunicación para almacenar, recuperar, tranmitir, y manipular datos con frecuencia utilizado en el contexto de los negocios u otras empresas.

Comuniccaión Sincorna.
En tiempo real
Asíncrona.


HyperText Markup lenguage.

Sistema de marcas de hipertexto se enfoca en diferenciacion y síntesis.
Meta tiene funcionalidad hacia los motores de búsquea.


Etiqueta style se usa más para emails porque todo debe ir junto.

<!doctype html>
Define que el documento está bajo el estándar de HTML.

<head>
Representa una colección de metadatos acerca del documento, incluyendo enlaces a, o definiciones de, scripts y hojas de estilo.

<title>
Define el título del documento, el cual se muestra en la barra de título del navegador o en las pestañas de página. Solamente puede contener texto y cualquier otra etiqueta contenida no será interpretada.

<base>
Define la URL base para las URLs relativas en la página.

<link>
Usada para enlazar JavaScript y CSS externos con el documento HTML actual.

<meta>
Define los metadatos que no pueden ser definidos usando otro elemento HTML.

<style>
Etiqueta de estilo usada para escribir CSS en línea.

<body>
Representa el contenido principal de un documento HTML. Solo hay un elemento <body> en un documento.

<section>
Define una sección en un documento.

<nav>
Define una sección que solamente contiene enlaces de navegación

<article>
Define contenido autónomo que podría existir independientemente del resto del contenido.

<aside>
Define algunos contenidos vagamente relacionados con el resto del contenido de la página. Si es removido, el contenido restante seguirá teniendo sentido

<h1>, <h2>, <h3>, <h4>, <h5>, <h6>
Los elemento de cabecera implementan seis niveles de cabeceras de documentos; <h1> es la de mayor jerarquía y <h6> es la de menor importancia. Un elemento de cabecera describe brevemente el tema de la sección que introduce.

<header>
Usualmente contiene un logotipo, el título del sitio Web y una tabla de navegación de contenidos.

<footer>
Define el pie de una página o sección. Usualmente contiene un mensaje de derechos de autoría, algunos enlaces a información legal o direcciones para dar información de retroalimentación.

<address>
Define una sección que contiene información de contacto.

<main>
Define el contenido principal o importante en el documento. Solamente existe un elemento <main> en el documento.

<form>
Representa un formulario, con atributos de controles que puede ser enviado a un servidor para procesamiento.

<img>
Representa una imagen.

<iframe>
Representa un contexto anidado de navegación, es decir, un documento HTML embebido.

<a>
Representa un hiperenlace, enlazando a otro recurso.

<em>
Representa un texto enfatizado, como un acento de intensidad.

<strong>
Representa un texto especialmente importante .

<small>
Representa un comentario aparte, es decir, textos secundarios como un descargo de responsabilidad o una nota de derechos de autoría, que no son esenciales para la comprensión del documento.

**REFERENCIAS**:


Los elementos de visualización del usuario son de diagoal izquierda superioes ha diagonal derecha inferior.
Los botnes CTA call to action deben ser lo sprimeros visibles


papaer wiframe esquema de como será el sitio web.
En cada sección voy mirando que necesito para mi sitio web.

Está estructurado así:

mENU
mAIN QUE TIENE LSO cta 
iMAGENES DE BENEFICIOS
CASOS DE EXITO

¿Como puedo hacerlo con PSE?

______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________

PREGUNTAS:
______________________________________________________

TEMA: DISEÑO DE INTERFACES.
______________________________________________________

**RESUMEN**:
______________________________________________________

Bosqueja cómo quieres que e maquete tu página web.
Así tendrás claro que elementos irán en qué parte y cuantas cosas harás.
Escoge tu paleta de colores, tu tamañao de fuente desde antes de emepezar.


:root{
Todo loq ue pongamos dentro de root será accesible apra todo lo demas en css.

Se inicializa
--green-color:

se llama mediante var(--xxyyww)


Curso de XD actualizado?


Animaciones en CSS
animations.css


.fadeIn{
-webkit-animation-duration:4s;
animation-duration:42;
animation-fill-mode:both;
-webkit-animation-fill-mode:both;
animation-name: fadeIn;
-webkit-animation-name:fadeIn;
}

@keyframes fadeIn{

from	{
	opacity:0
	}
to {
	opacity:1
}
}
```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:Atributos especiales de las etiquetas para mejorar el funcionamiento de nuestros formularios
______________________________________________________

**RESUMEN**:
______________________________________________________

Los labels no son como otras etiquetas que solo guardan y muestran el texto con los diferentes estilos que definamos en el CSS. Los labels están especialmente preparados y optimizados para que nuestros formularios funcionen correctamente.

```
<code>

```
Atributos para asociar labels a sus respectivos inputs
______________________________________________________

Mejorar los labels inputs.

<label>
Nombre:
<input type=”text” />
</label>

<label>
Edad:
<input type=”number” />
</label>



Segunda forma:

<label for=”nombre”>Nombre:</label>
<input type=”text” id=”nombre” />

<label for=”edad”>Edad:</label>
<input type=”number” id=”edad” />

Atributos para enviar los datos de nuestros formulario
_______________________________________________________
 Solo debemos añadir algunos atributos en la etiqueta <form> y en los inputs y botones de nuestro formulario.

Action: Este atributo de la etiqueta <form> nos permite establecer el lugar o URL donde los datos de los usuarios deben ser enviados una vez ellos terminen de llenar el formulario.
Name: Este atributo de las etiquetas <input> nos permite que los datos que los usuarios hayan escrito se envíen correctamente cuando han terminado de llenar el formulario. El valor de esta etiqueta debe indicar el nombre con el cual queremos almacenar o interactuar con esta información en el futuro.

Type: El atributo type=”submit” le permite a los usuarios indicar que han terminado de llenar el formulario y lo pueden enviar para almacenar la información. También podemos usar este atributo en inputs para que estos pasen a tener el rol de botón de envío del formulario.

<form action=”URL_DONDE_QUIERO_ENVIAR_LO_DATOS”>
  <label for=”nombre”>Nombre:</label>
  <input type=”text” id=”nombre” name=”user_name” />

  <label for=“edad“>Edad:</label>
  <input type=”number” id=”edad” name=”user_age” />

  <button type=”submit”>Enviar mis datos</button>
</form>


label guarda información que estabas difitando antes en name., email, name number...
**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________
libreria conjunto de rutinas, funciones que tienen un objertico.

Dividir las secciones de mi proyecto mediante comentarios.



PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________

TEMA:
______________________________________________________

**RESUMEN**:
______________________________________________________

```
<code>

```


**REFERENCIAS**:
______________________________________________________

[](url)
______________________________________________________
**NOTAS**:
______________________________________________________





PREGUNTAS:
______________________________________________________



