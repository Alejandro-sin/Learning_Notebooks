SWEBOK.ORG


Ingenieria de software.

TIPOS DE SEVRICIO


Abstract
Servicio de ingeniería de software asistida para la desarrollo, validación y evaluación de sistemas computarizados.



///////////////////

Desarrollo iterativo

Servicio de desarrollo iterativo, 
acompañamiento a la compañía donde los sistemas se dearrollan inicialmente de especificaciones abtractas.


(Ventajas)
(Falencias)





////////////////////////

Enfoque cascada

Posee un modelo de flujo de trabajo, un modelo de flujo de datos, un modelo de roll-accion.
Modelo de flujo habla de flujo de entradas, salidas y dependencias. Estas representan acciones humanas.

Modelo de flujo de datos, muestra las tranformaciones de los datos.

Tal como una especificación se transforma en una salida.


Rool accion, los responsables e involucrados en los procesos del software.


(Ventajas)
(Falencias)

Ingeniería de software basada en componentes.

Es la integración de los servicios que posee, explotando las capacidades, y sacando provecho a las herramientas compradas. Maximizar el uso del software permite tener mejor control sobre sus procesos. 

"Sacarle el jugo al potencial informático."

"Las aplicaciones no se comunican solas, nosotros lo hacemos por usted."

Integra las partes del software que ya existen, es decir, un sistema que reposa en una compañía es la interacción de n-softwares, muchos se conectan mediante rutinas, protocolos de operación. Pero existe un nivel de integración de las herramientas.



CAPITULO 1.

El software es también concebido a nivel docuemntal, es decir es la app + docuemntación necesaria pata que un producto opere correctamente.

Existen dos tipos de productos

1.Productos Personalziados.

Que hace referencia al tipo de desarrollo que se hacen apra compañías-

2.Productos Genéricos.

/Son paquetes de software ya hechos que se consideran sistemas aislados, producidos por una organización de desarrollo.


Hay varias formas de desarrollar( Enfocadas a la empresa):

Modelo Cascada.

//Costo y tiempo reducidos.

Tiene la seguridad de que lo que se ofrece es firmado por las partes.

Desventaja que su lo qe se solicita no es preciso haya poca satisfacción

Modelo Iterativo (Como elmodelo V de desarrollo)

Acompañamiento hasta satisfacción

Costos por proyecto, superior al promedio.
Dependen de la acertividad de los requisitos de usuario.

Modelo Integral:

Requisitos de usaurio fijos, se firma, se hacen máximo dos revisiones. Se firma
Se valida y se evalua con el tiempo.

Ventajas: Medianamente personalizado, costos promedio, y duración de proyecto ligeramente superior
Los costos del proyecto dependen de la duración del trabajo. La duración de las actividades dependende de la complejidad de los requisitos.

La estimación del tiempo de validación sucede despues de concretar etapas 1,2,3.
/Los costos de evolución varían drásticamente dependiendo dle tipo de sistema, Muchas veces son cambios a un producto listo lo que alarga los desarrollos.

MÉTODOS EN INGENIERIA DE SOFTWARE:

Son formas de trabajo estructurado que permiten desarrollar más fácil el software. Poseen algunas propeidades como:

Descripciones del modelo, Reglas, Recomendaciones y guías del proceso.


Herramientas CASE.(Ingenieria del software asistida pro computadora).

Es un abanico de programas que se utilizan para ayudar a las activades del proceso.

Como anaálisis de requerimentos. Modelado de sistemas, Depuración y las pruebas. 
En la actualidad todos los métodos vienen con metodologías CASE. Como editores para notaciones, modulos de análisis que verifican el modelo del sistemas según las reglas del método y generadores de informaes que permiten crear documentación del sistema.

BUENO SOFTWARE CUENTA CON...

No está asociado con lo que el software hace si no con lo que refleja  durante la ejecución.

LLamados atributos no funcionales:

Son el tiempo de respuesta del software a ua pregunta del usuario y la compresión del programa fuente.

Mentenibilidad:
El software debe escribirse de tal forma que pueda evolucionar para cumplir las necesidades de cambio de los clientes. éste es un atributo crítico debido a que el cambio en el software es una consecuencia inevtiable de un cambio en el entorno de negocios.

Confiabilidad:

La fiabilidad, protección y seguridad. Software confiable no debe causar daños físicos, económicos en caso de falla del sistema.

Eficiente:

El software no debe malgastar los recursos del sistema, como la memoria y los ciclos de procesameinto. Influyen los tiempos de respuesta y de procesameinto, memoria y su utilziación.

Usabilidad:

El software debe ser fácil de utilizar, sin esfuerzo adicional, pro el usuario para quien está diseñado. Esto significa que debe tener uan interfaz apropia y uan docuemntación adecuada.

RETOS DE LA INGENIERA DE SOFTWARE.

Heterogeneidad:

Desarrollar Técnicas para construir software confiable que sea flexible para adecuarse a la hetergenidad de sistemas herdados, computadoras diferetnes.

Reto d ela entrega:

Los negocios de hoy en día requieren de solciones rápidas. El reto es reducrir los tiempos de entrega para sistemas grandes y complejos sin comprometer la calidad dle sistema


Reto de confianza:
Desarrollar tecnicas que muestren que los usarios puedne confiar en el software.


RESUMEN DE CAPITULO:

Productos de software incluye las actividades relativas al desarrollo del software, desde la especificación, dearrollo, validación hatas la evolución de todos los procesos de software.

Mñetodos son formas organizadas de prodcur software. Incluyen sugerencias, notaciones, modelos del sistema que hay que desarrrollar y las reglas que gobiernan estos modelos así como las pautas de diseño.

Herramientas CASE so n sistemas de software que ayudan a las actividades del proceso de software. Editar diagramas de diseño, verificar y mantener un banco de pruebas.



EJERCICIOS CAPÍTULO 1.

1.1 Porque poseen un conjunto de documentación, requisitos y pautas que deben incluirse en el software para su transparencia, usabilidad.

1.2 Genérico es aquelos que se venden como marcas registradas, pesoanlizados son hechos a la medida.

1.3 Mantenibilidad, Confiabilidad, Eficiencia, Usabilidad

1.4 Modelo es una estructurado de software es una forma de trabajo organiada:
	Permite identificar a lso responsables y los roles del proceso.
	Garantiza el cumplimeinto y el entendimiento del que hacer.
	
1.5 (No sé porqué son particularmente altos estos costos), Digamso que un software que se usa tanto, necesita muchas pruebas precisamente de heterogeneidad, debe ser muy robusto para abarcar todos los usuos, así que las pruebas son más rigurosas.

1.6 Métodos de ayuda que proporcionan las CASE. Modelado, gestión de proyectos, adminstración docuemntal, revisión de errores, contorl del metamodelo.

1.7 Probleas del siglo actual en programción, Previa existencia, muchas soluciones ya se brindan, pero se siguen generando aplicaciones de lo mismo, Posicionamiento. Un software se vende, y debe posicionarse como un servicio. Estándares de calidad.



Lecturas adicionales cel capitulo///////////////

https://es.wikipedia.org/wiki/Herramienta_CASE


////////////////////////////////////////////CAPÍTULO 2/////////////////////////////////////////////////////////////////


SISTEMAS SOCIOTÉCNICOS 


Sistemas así incluyen, personas, software y hardware.


Un sistemas es uan colección de componentes interrelacionados que trabajan conjuntamente para cumplir algún objetivo.
Los sitemas que usan software y hardware son dos:

Sistemas ténicos informáticos:

Son aquellos sistemas que incluyen ambos componentes (sof-hard ware) sin embargo estos son usados por organizaciones o individuos por un fin,.El procesador de textos no es conciente de que se está ustilzuando par aescribir u libro.

Sitemas sociotécnicos.

Son sistemas técncios pero incluyne cnocimiento sobre somo usarlo, considera a la individuo como un operador,, estos sistemas están restrigndo por politicas organizacionales, leyes, ...FDA Invima

Características de estos sitemas:

Propiedades emergentes:

Son aquellas que no son asociadas a cada parte del sistema si no que es en un aspecto mucho más amplio, solo puede notarse cuando los sistemas han sido establecidos o montados.

No deterministas:

Una enrtada específica no siempre producen la misma salida.
El comportamiento del sistema depende de operadores humanos, y las personas no siempre reaccionan de la misma forma. El uso del sistema puede crear nuevas relaciones entre los compnentes del sistema y por lo tanto cambiar su comportamiento emergente.


El grado de apoyo:

El grado de apoyo de un sistema a los objetivos organizacionales no depende del sistema en sí mismo.Depende de a estabilidad de lso objetivos, de las interpretaciones de losoobjetivos, de los conflictos entre esto. Una nueva dirección puede reinterpretar los  objetivos organizacionales para los que un sistema está diseñado y un sistema exitoso puede convertirse en un fracaso.


Los sistemas sociotécnicos de alguna manera buscan concretar las relaciones entre hmanos, máquina y software. La interopreabilidad de un sistema los vuelve subsistemas de un sistema sociotecnico. 

Por ejemplo el software de geolocalización policiaco puede usarse en un contexto de Logísitca empresarial.
En otras palabras, las herramientas puedne usarse en diferentes ámbitos, la adecuación de estas herramientas a los contextos específicos suponen siempre problemas.

El problema más frecuente es, volver mñas eficiente el software sin efectuar cambios en la máquina.

Por lo que, como ingeniero de software es vital conocer el comportamiento de hardware y software para saber cmo desarrollar mejor, como prevenir fallas.
Entender los límites del software permite diseñar mejor software.


PROPIEDADES EMERGENTES:


Porpiedades que no se pueden atribuir a partes especificas del sistema si no hasta cuando estas partes conforman un todo,allí nacen estas propiedades.

Existen propiedades emergentes funcionales, que son aquellas que hablan de que cada una de las partes funciona.
Propiedades Emergentes no funcionales: Fiabilidad, Seguridad, protección y rendimiento. Ya que emergen durante la operación del sistema.

Los componentes del sistema son Interdependientes. Un fallo en uno, puede propagarse a otros sistemas y afectar la operación de otros componentes.
Es complejo predecir la manera en que las consecuencias de los fallos de lso componentes se progpagan a través del sistema. 
Por consiguientes es dificil hacer estimacioens de la fiabilidad en conjnto del sistema.

3 influencias conexas sobre al fiabilidad de un sistema:

1. Fiabilidad del hardware:¿Cual es la probabilidad de que un componente harware falle y cuanto tiempo llevareparar ese componente?

2. Fiabilidad del software:¿Qué probabilidad hay de que un componente del software produzca una salida incorrecta?, Los fallos de funcionamiento del software normalmente son distintos a los de hardware, debido a que no se desgastan. Los problemas de software son transitorios ocasionalmente. Pueden continuarse usando después del resultado incorrecto.

3. Fiablidad del operador:¿Quñe probabilidad hay de que un operador del sistema cometa un error?

Interesante:
Un fallo del software, puede deberse al hardware, un componente con un comportamiento fuera de rango de las entradas esperadas por el software. El software se comporta impredecible y sumando a ello un mal uso del operador puede convertirse en un problema serio.
Porpiedades como seguridad y protección, sn aquellas que restringen accesos no autorizados. Peor para saber que un sistema es seguro debe intentarse vulnerar.



INGENIERIA DE SISTEMAS

Es la actividad de diseñar, especificar, implementar, valdiar, utilizar y mantener los sostemas sociotécnicos. Los ingenierso de sistemas tratan desde software, hardware, y personas.
/Fases del proceso de ingenieria de sistemas
Definición de requerimentos
Diseño del sistema
Desarrollo del subsitema
Integración
Instalación
Evolución
Desmantelamiento.

Diferencias entre ambas ingeneirias.

1.Rara vez se hacen cambios en el diseño dle sistema una vez se han implementado. El software se ajusta a los requerimentos.
2.Terminología diferente e interdisciplinaria.

Ingenieria de sistemas es interdisciplinaria, conecta conjntamente las demás ingenierias y las ponen en contexto. Aquí, el ejemplo del CTA control de trafico areo.
Un conjunto de disciplians se hablan entre sí ara poder mantener un sistema en tiempo real como este.

En un sistema, no existen soluciones únicas, existen diferentes soluciones con un contexto técnico significativo y diferente, donde cada rol podrá desempeñar una tarea en concreto.

Es decir, un problema de ingeniería se puede solucionar por distintas vías. Por ejmeplo con CTA uno podría mejorar los radares o el algoritmo del software que calcula las distancias, o desde la ingenieria civil, poniendo más radares. Para la misma solución, mejorar la cobertura.



REQUERIMENTOS DEL SISTEMA.

Las definiciones de requerimentos del sistema especifican qué es lo que el sistema debe hacer (sus funciones), propiedades esenciales y deseables.


1. Requerimentos funcionales abstractos:

Son requisistos funcionales en un nivel abstracto. Es decir, el propósito de lo que se quiere del sistema. "Una base de datos que controle las entradas de muestras". Los detalles de esa base de datos, no se especifican a menos que afecten a los requerimentos de otros subsistemas. 
//Por ejemplo, si el usuario requiere que esta base de datos actualice unos formularios. 

2. Propiedades del sistema:

Son propiedades emergentes no funcionales. Dsiponibilidad, rendimientos, y seguridad.

3.Características que no debe mostrar el sistema:

Se debe tratar de entender lo que el sistema debe y no debe hacer. Por ejemplo, no debe mostrar cierta información no relevante a los usuarios.

NOTA:Los requerimentos deben establecer un conjunto de objetivos por cumplir. No necesariamente funcionales, pero si deben definir porque se construye un sistema para determinado entorno.
// Por ejmplo, esta base de datos se construyes porque se requeire control de los insumos del laboratorio. 

*Construir un sistema de alarma contra incendios e intrusos para el edificio, que proporcione avisos de fuego y de intrusiones no autorizadas tanto internas como externas.

*Existen problemas traviesos, o esquivos cuyas relaciones multples solo emergen una vez los sistemas son desarrollados.


DISEÑO DEL SISTEMA.


1. Dividir requerimentos.
2. Identificar subsistemas.
3. Asignar requerimentos a los subsistemas.
4. Especificar las funcionalidades de los subsistemas.. /Especificación de las relaciones.
5. Defniri las interfaces del subsistema.

Las restricciones de los sistemas limitan eleccioens del diseño.
Muchso requisitos peuden ser contrdictorios y hacer que se replanteen el diseño inicial del sistema.

Una forma de solucionar este problema es mediante un enfoque en espiral.

1.Definir el problema.
2.Obtener y analizar requerimentos
3 Diseño arquitecutra
4.Revisión y valoración.

Luego vuelve a empezar el proceso en caso de haber problemas. Este enfoque en espiral refleja el problema real de que los requerimento afectan a las desiciones de diseño y visceversa.

PUes cada vuelta de la espiral añade un detalle a los requeriemntos y al diseño.A veces un nuevo conocimiento de los problemas supone que se replanteen las soluciones.

"La solución que elij a para el desarrollo deberá ser la solución técnica más apropiada que cumpla con los requerimentos. Sin embargo, las intervenciones organizacionales y políticas pueden influir en la elección de la solución.

//Nota personal. Podría indicar que las instancias iniciales donde se ponen por escrito las reglas de juego son muy importantes.
Las emrpesas no quieren gastar mucho presupuesto. Pocas veces entienden lo que quieren, y muchas veces son caprichos desinformados.

Las osluciones de software existen en la industria mucho. Qué soluciones son pertinentes apra el laboratorio?. 
Las políticas empresariales suponen restricciones muchas veces, pero tambiñen ayudan mucho dentro del "ambiente" del desarrollo.
¿Qué políticas pueden influir más en esto?, La flexibilidad de las operaciones.

Es decir existen soluciones que intengran, hardware, software y operaciones humanas. 
Pero Existen soluciones a esos sistemas, que pueden solo intervenirse mediante el establecimiento de un protocolo y/o un procedimeinto.
////////////////////////////////

El proceso de adquisición de requerimentos y diseño de alto nivel termina cuando son suficientemente detallados para permitir empezaar la siguiente fase del proceso.


MODELADO DE SISTEMAS.

La arquitectura del sistema peude ser representada mediante bloques, que meustren las interconexcciones entre subsistemas.
Se pueden modelar los requisitos y el diseño mediante diagramas de bloques, y flechas de flujo direccionales o bidireccionales.
Pensar en el diagrama de Alrma contra intrusos./Posee sensores movimeinto/ Alertas/Sonidos/Sensores puertas Todos son susbsistemas del Control/Alarma.

Todo diagrama de bloques debe de ir con un cuadro donde se describa cada subsistema.

Un sistema es multifuncional, está compeusto por susbsistemas que se hablan entre si. Es mejor clasficar los subssistemas en términos de sus funiones.



DESARROLLO DE SUBSISTEMAS 


Los subsistemas pueden desarrollarse ( al ser hardware, operadres o software). dependiendo de las necesidades. Normalmente es más barato adquirir COTS. que son soluciones en software existentes (Excel.. SCADA, LIMS), pues todo desarroollo de software conlleva requerimento, diseño, implementación y pruebas.


INTEGRACIÓN DEL SISTEMA.

Se toman lso subsistemas y se juntan. (Big Ban)
O se toman y se juntan uno a uno. Integración creciente reduce costos. Es posible evaluar los errores al evaluar las intereacciones entre el nuevo subsistema y los existentes.

Una vez integrado, las pruebas pretenden probar las interfaces entre lso componentes y el comportamiento del sistema en su totalidad.
Debido a los errores en als interfaces, se peude evaluar desde ambas partes donde está el error.

EVOLUCIÓN DEL SISTEMA.

Sistemas grandes y complejos, largo periodo de vida. Durante su vida, se cambian cosas para corregir lso requerimentos que surgen.
Cambios de hardware.
Cambios Organizacionales
Entorno externo cambia forzando cambios itnerno


La evolución del sistema como la del software es costoso:
1. Los cambios se deben analizar tecnicamente y desde negocios. Deben orientarse los cambios al propósito del sistema
2. Un cambio en un subsitema puede alterar los demás.
3. Los responsables de la evolución del sistema tiene que resolver porqué se tomaron decisiones particulares de diseño.

//Puede solucionarse documentando las cosas, no?


Los sistemas que se han desarrollado con el tiempo dependen de tecnologías hardware y software obsoletas. Si tienen un papel crítico en la organización, son conocidos como sistemas heraddos./Sistemas que la organización le gustaría reempalzarpero donde lsos riesgos de introducir un nuevo sistema son altos.

DESMANTELAMIENTO DLE SISTEMA.


Poner fuera de servicio a dicho sistema después de que termina su periodo de utilidad operativa.
Lo que se hace es que se reciclan las cosas útiles (hardware). El software no tien problemas físicos.

Si los datos del sistema que se está desmantelando todavía poseen valor empresarial, puede convertirlos  para utilizarlos en otros sitemas. Puede ser costoso, ya que la estructura de datos puede estar implicitamente definida en el software mismo. Se debe analizar el software para saber como están estructurados lso datos y escribir un programa para reorganizarlos en las estructuras exigidas por el nuevo sistema.

ORGANIZACIONES, PERSONAS Y SISTEMAS INFORMÁTICOS.

Organizaciones son el límite de los sistemas osicotecnicos, Estos ofrecen un servicio, incrementar ventas, clllevar controles... para entnder lso requerimentos necesito entender el entorno organizacional. Entender la cultura de trabajo

//Aquí un apunte. Desde ingenieria industrial se evidencia que las personas no trabajan consecuentemente bien, por malas prácticas intencionales, que finalente afectan la calidad del producto entregado. Como se resuelve el paradigam del mal hacer y la progamación?
Es decir, insisisto en que no se debe programar nada que no haya pasado por un filtro ingenieri.l.

Factores humanos y organizacionales del entorno del sistema que afectan a su diseño con 

1. Cambios en el proceso: ¿El sistema requiere cambiar los procesos dle entorno?.
Si los cambios son significativos o implican que la gente pierda su trabajo habrá resistencia.

2. Cambios en el trabajo ¿El sistema inhabilita a los usuarios en un entorno o hace que cambie su forma de trabajar?

Si es así, se resisiten a la indtroducción del sistema en la organización. Los directivos sienten que su jerarquía en la organización se ve reducida por el sistema.

3. Cambios organizacionales. ¿El sistema cambia la estructura de poder en una organización?

Si una organización depende de un sistema complejo, aquellos que saben como operar el sistema tienen un gran poder político.


"Enid Mumford advertía si se crea un sistema técnico a expensas de un sistema social, los resultados obtenidos serán subóptimos. Su diseño socio-técnico propugna un principio ético: que los individuos de la organización puedan participar en la toma de decisiones y así ejercer control sobre su entorno inmediato. El enfoque socio-técnico procura entender la complejidad de las situaciones reales y lidiar con problemas de las condiciones laborales en las organizaciones que incorporan tecnología.

Al tiempo que tecnologizamos la sociedad, debemos socializar la tecnología."

IDEALMENTE todo conocimeinto organizacional relevante debe incluirse en la especificación del sistema
(QUñe es un conocimiento organizacional relevante?)

Pero esto es imposible. Tener en cuenta que las organizaciones pueden tener objetivos contradictorios.


//Por ejemplo, el modificar resultados técnicos para liberar productos, pero se pide al programador que se establezcan controles para evitar las odificaciones de usuarios no deseados.

->Es contradictorio porque en vez de hacer un análisis de causas, se sigue operando de la msima manera.

// La ingeniería industrial podría solucionar esto?


PROCESOS ORGANIZACIONALES. pÁGIAN 48.


La adquisisicón de sistemas COTS o personalizados es importante. El software nace como el pegamento para los COTS. Este pegamento cada vez existe más debido a qué el supuesto ahorro por usar Cots no es tan grande.

1. Comunmente lso componentes comerciales no cumplen de forma exacta los requerimentos a menos que se hay escrito el software pensando en ellos.
(Por eso se necesita adecuar EXCEL) //Podría llamar a esto especificidad del software. Es como el foco que se le obliga a tener al programa dentro de un contexto en particular.

Por lo cual se deben escoger sistemas que tengan más correspondencia con los requisitos del sistema y funcionales ofrecidas por los sistemas comerciales.
Puede tener que mdoificar los requerimentos y esto, perturbar otros subsistemas.
//
Por ejemplo. Si los usuarios están usando Excel. La introducción de Google sheets es una irrupción cenptual y tránsito en desarrollo. Lo escrito en VBA no es Leible en Sheets.
//


2.Cuando un sistem ase construye de forma especial, o a la medida, la especificación de requerimentos actúa como la base de un contrato para la adquisición del sistema. Por lo tanto es un documento legal y también técnico.

3. Las negociaciones con contratistas llevan negociaciones y cambios en los requerimentos. Así como discutir temas de costos de lso cambios del sistema,


Sistema de contratistas y subcontratistas. Puedo hacer contratos generales de grandes proyectos que peudo distribuir mediante su contratos y luego unificar las partes y entrgar al cliente.


LOS PORCESO OPERATIVOS 
deben docuemntarse durante el desarrollo para capacitar al personal en caos de existir nuevos procedimeintos por ejecutar. eN ESTA ETAPA PUEDEN SURGIR PROBELMAS NO DETECTADOS porque los URS tiene errores u omisiones. Mientars que el sistema puede funcionar conforme a la especificación, sus funciones pueden no cumplir las necesidades operativas reales.

Por cosngiuiente es posible que lso operadores no usen el sistema como sus diseñadores penssaron


Los porcesos operativos reales son diferentes a lo anticipado por lso diseñadores del sistema.
El es decir, // Las herrameintas se usan muchas veces diferente a su propósito.


SISTEMAS HEREDADOS.

Sistemas heredados son sistema sociotécnicos qu ehan sido desarrollados en el pasado, a menudo usando tencología antigua y obsolote.

Puede ser hardware, software o procesos.
Los sistemas heredados son sistemas de negocio críticos. Se mantienen por ser demasiado riesgoso reemplazarlos.

Estos sistemas puedne operar de la siguiente manera. Por capas.

PROCESOS DE NEGOCIO
SOFTWARE DE APLICACION
SOFTWARE DE APOYO.

como si fueran pisos cada una depende del piso inmediatamente anterior. Y normalmente cada cambio en uno d elso pisos suponen variaciones dentro del sistema.

Por ejemplo, para que un cambio en el software de apoyo, como una nueva base de datos. Puede ser aprovechada en el nivel superior exploradola en un navegador wen y usando dicha información.


ejercicios capítulo 2.

2.1 Causas humanas de operación. Ataques al subsistema.
2.2 Para la gestión de desastres es un problema porque los requerimentos y especificaciones ocurren una vez el desastre ocurre, por lo cual es difícil preveer la situación.
2.3 Tener un control del automovil en un software podría hablar sobre el estado dle automóvil, indicando qué partes están gastadas mecánicamente y cuales puede usarse nuevamente o reciclarse.

2.4 Es importante presentar una arquitectura para que las partes sepan como se relacionan los requisitos, y qué subsistemas están involucrados.

2.5 y 2.6 son dibujo de arquitecruas para sistemas de alramas, controles y demás.

2.7 Pueden ocurrir probelmas emergentes con el sistema de realidad virtual y modelos en las páginas 3d, donde los procesos de experiencia del usuario pueden cambiar debido a que cambia la dinámica de interacción entre ls usuarios y el museo

2.8 Un sistema heredado peude ser crítico debido a la dependencia que puede tenerse con este, las formas de trabajar de los operadores, las políticas organizacionales se ven ceñidas a este.

2.9 Se justifica por 2.8

2.11 Debería llegar hasta la creación de sistemas sociotécnicso que incluyan el componente social. Un sistema sin esto, es subóptimo. Si , es responsabilidad completar instalación sin embargo, escribiría los imapses de la instalciónen un reporte que especifique lo anterior. No, no debería abandonar el trabajo, si no rediseñar el sistema para se adate al análisis de causas del rechazo dle sistema, teneiendo en cuenta las cláusulas del contrato.




//////////////////////////////CAPÍTULO 3/////////////////////////////////////////////////////////

SISTEMAS CRÍTICOS. Página 55

	











