# -*- coding: utf-8 -*-
"""workingData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEUqvZiA8mnzchupqBwMx9TPaounfLvz
"""

import pandas as pd
import numpy as np
import seaborn as sns
import psycopg2
import matplotlib.pyplot as plt
from math import pi
from google.colab import drive
drive.mount('/content/drive')

''' 

El propósito de este código es:

1. Conectarse con BD para tomar un dataframe con qu pueda trabajar.
2. Procesar datos y visualizar métricas de desempeño en un .svg que devuelve a BD.


'''

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/Colab Notebooks/retrolearning'
# %ls
dir_pandas = '/content/drive/My Drive/Colab Notebooks/retrolearning/{}'.format('')

# Conectar a base de datos
# conn_sql = psycopg2.connect(user = "postgres", password = "rootetrx",
#                             )

PATH = "MOCK_DATA.csv"
df = pd.read_csv(PATH)
df = df.drop(['id','CORRECTA'], axis=1)
df = df.rename(columns={'TIEMPO POR PR':'TIEMPO'})
df

# describe sample
sample = df[:30]
sample

# Ocurrencias de dificultad de las preguntas

# La idea es identificar el balance de dificultad entre las pregutnas y un exámen.
# La idea es hacer el producto de la dificultad por la frecuencia, y sumar el total de estos productos. 
# Con este valor calificar el exámen y su dificultad relativa según percepción de Maestro.
lista = sample['DIFICULTAD'].value_counts()
ocurrency = pd.DataFrame(lista)
ocurrency
# score_ocurrency = ocurrency.mul(ocurrency)
# score_ocurrency = score_ocurrency['DIFICULTAD'].sum()
# score_ocurrency

# Nuemro de variables
categories = list(sample)[1:]
N = len(categories)
 
# De la muestra saco un numero de va

values = sample.loc[0].drop('INTENTOS').values.flatten().tolist()
values += values[:1]
values
 
# Angulo de cada eje
angles = [n / float(N) * 2 * pi for n in range(N)]
angles += angles[:1]
 
#Inicialziar el grafico de radar
ax = plt.subplot(111, polar=True)
 
# Dibujo labels, y ejes
plt.xticks(angles[:-1], categories, color='grey', size=8)
ax.set_rlabel_position(0)
plt.yticks([10,20,30], ["10","20","30"], color="black", size=7)
plt.ylim(0,40)
 
# Plotear la data
ax.plot(angles, values, linewidth=1, linestyle='solid')
 
# Rellno las áreas
ax.fill(angles, values, 'b', alpha=0.8)

"""## En las lineas siguiente de código traigo loos diferentes niveles de dificultad."""

#Traigo los temas más difíciles
hard_tag = sample[(sample['DIFICULTAD'] >= 5) & (sample['TIEMPO'] >= 30) & (sample['INTENTOS'] >= 7)]
hard_tag = hard_tag.iloc[0,1]
hard_tag

# Medio
sample[(sample['DIFICULTAD'] >= 3) & (sample['DIFICULTAD'] <5 )]

# Nivel de dificulta menor
sample.query('DIFICULTAD < 3')

# Aqui irían los gráficos exportados a .svg según lso resúmenes.
sns.distplot(sample['DIFICULTAD'])
plt.savefig("exm.svg", transparent = True)

sns.distplot(sample['TIEMPO'])
plt.savefig("exm.svg", transparent = True)

# Asumiento que el TAG es el tema aqui podríamos evidnecia cual es el tema más complicado.
sns.distplot(sample['TAG'])
plt.savefig("exm.svg", transparent = True)













